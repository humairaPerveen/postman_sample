{
	"info": {
		"_postman_id": "01eac0dc-cd6e-48e5-aca9-c04ba970ad81",
		"name": "API_Automated_TestCases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20469626"
	},
	"item": [
		{
			"name": "Authentication Test",
			"item": [
				{
					"name": "Fetch Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//API status code assertion",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"base_structure\", function () {",
									"",
									"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
									"});",
									"",
									"pm.test(\"contains_user\", function () {",
									"  ",
									"    pm.expect(jsonData.response).to.includes.keys('user');",
									"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
									"})",
									"",
									"if (pm.response.code === 200) {",
									"    console.log(jsonData.response, 'Response Data');",
									"    console.log(jsonData.response.accessToken, 'Access Token');",
									"",
									"    pm.collectionVariables.set(\"api_bearer\", jsonData.response.accessToken);",
									"    pm.collectionVariables.set(\"collection_refresh_token\", jsonData.response.refreshToken);",
									"}",
									"",
									"pm.collectionVariables.set(\"username\", jsonData.response.user.username);",
									"pm.collectionVariables.set(\"firstname\", jsonData.response.user.firstname);",
									"pm.collectionVariables.set(\"lastname\", jsonData.response.user.lastname);",
									"pm.collectionVariables.set(\"user_id\", jsonData.response.user.id);",
									"pm.collectionVariables.set(\"role\", jsonData.response.user.role);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "democlientsecret",
									"type": "string"
								},
								{
									"key": "username",
									"value": "democlient",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{username1}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password1}}",
									"type": "text"
								},
								{
									"key": "deviceId",
									"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
							"host": [
								"{{api_host_protocol}}{{api_hostname}}"
							],
							"path": [
								"oauth",
								"token"
							]
						},
						"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
					},
					"response": [
						{
							"name": "New Access Token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Surrogate-Control",
									"value": "no-store"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=5184000; includeSubDomains"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1178"
								},
								{
									"key": "ETag",
									"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
								},
								{
									"key": "Date",
									"value": "Mon, 14 Feb 2022 17:11:26 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
						},
						{
							"name": "Invalid Username/Password",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Surrogate-Control",
									"value": "no-store"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=5184000; includeSubDomains"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "112"
								},
								{
									"key": "ETag",
									"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
								},
								{
									"key": "Date",
									"value": "Mon, 14 Feb 2022 17:11:51 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
						},
						{
							"name": "Invalid Client",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Surrogate-Control",
									"value": "no-store"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=5184000; includeSubDomains"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "127"
								},
								{
									"key": "ETag",
									"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
								},
								{
									"key": "Date",
									"value": "Mon, 14 Feb 2022 17:13:51 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
						}
					]
				},
				{
					"name": "Login with wrong Creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"base_structure\", function () {",
									"",
									"    pm.expect(jsonData).to.includes.keys('name', 'message','errors');",
									"});",
									"pm.test(\"The response has validation message\", () => {",
									"    pm.expect(jsonData.name).to.eql('InvalidCredentials');",
									"    pm.expect(jsonData.message).to.eql('Invalid username/password');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "democlientsecret",
									"type": "string"
								},
								{
									"key": "username",
									"value": "democlient",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{username1}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test1234",
									"type": "text"
								},
								{
									"key": "deviceId",
									"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
							"host": [
								"{{api_host_protocol}}{{api_hostname}}"
							],
							"path": [
								"oauth",
								"token"
							]
						},
						"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
					},
					"response": [
						{
							"name": "New Access Token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Surrogate-Control",
									"value": "no-store"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=5184000; includeSubDomains"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1178"
								},
								{
									"key": "ETag",
									"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
								},
								{
									"key": "Date",
									"value": "Mon, 14 Feb 2022 17:11:26 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
						},
						{
							"name": "Invalid Username/Password",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Surrogate-Control",
									"value": "no-store"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=5184000; includeSubDomains"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "112"
								},
								{
									"key": "ETag",
									"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
								},
								{
									"key": "Date",
									"value": "Mon, 14 Feb 2022 17:11:51 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
						},
						{
							"name": "Invalid Client",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Surrogate-Control",
									"value": "no-store"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=5184000; includeSubDomains"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "127"
								},
								{
									"key": "ETag",
									"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
								},
								{
									"key": "Date",
									"value": "Mon, 14 Feb 2022 17:13:51 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
						}
					]
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var userId =pm.collectionVariables.get(\"user_id\");",
									"var UserName = pm.collectionVariables.get(\"username\");",
									"var UserFirstName = pm.collectionVariables.get(\"firstname\");",
									"var UserLastName =pm.collectionVariables.get(\"lastname\");",
									"console.log(\"user id is:\" +userId)",
									"//API Assertion",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (responseCode.code == 200) {",
									"    const jsonResponse = JSON.parse(responseBody);",
									"    pm.collectionVariables.set(\"api_bearer\", jsonResponse.response.accessToken);",
									"    pm.collectionVariables.set(\"refresh_token\", jsonResponse.response.refreshToken);",
									"}",
									"//Verify that access token is not null",
									"tests[\"Access Token is not null\"] = jsonData.response.accessToken !== null;",
									"",
									"//Verify that password is not null",
									"tests[\"Password is not null\"] = jsonData.response.user.password !== null;",
									"",
									"// Verify the user id should be the same",
									"tests[\"Verify the user id is \" + userId] = jsonData.response.user.id === userId;",
									"",
									"// Verify that username should be the same ",
									"tests[\"Username is \" + UserName] = jsonData.response.user.username === UserName;",
									"",
									"// Verify that user's first name should be the same ",
									"tests[\"First Name is \" + UserFirstName] = jsonData.response.user.firstname === UserFirstName;",
									"",
									"// Verify that user's Last name should be the same ",
									"tests[\"Last Name is \" + UserLastName] = jsonData.response.user.lastname === UserLastName;",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "democlient",
									"type": "string"
								},
								{
									"key": "password",
									"value": "democlientsecret",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{collection_refresh_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
							"host": [
								"{{api_host_protocol}}{{api_hostname}}"
							],
							"path": [
								"oauth",
								"token"
							]
						},
						"description": "Fetches access token via refresh_token\n\n__@params__  </br>\ngrant_type - refresh_token </br>\nrefresh_token - the refresh token"
					},
					"response": [
						{
							"name": "New Access Token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Surrogate-Control",
									"value": "no-store"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=5184000; includeSubDomains"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "1307"
								},
								{
									"key": "ETag",
									"value": "W/\"51b-cNz027ZN+3mRziR90Q13dx5gPBM\""
								},
								{
									"key": "Date",
									"value": "Mon, 14 Feb 2022 17:11:02 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"response\": {\n        \"accessToken\": \"568b1b98f68bef2966e209185f4f48b83058ab1c\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:01.000Z\",\n        \"refreshToken\": \"b7986f361963c241899f46e66390f319339e045c\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:01.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"password\": \"$2b$10$qkvoS7PJbFogFnHNK1ID9.hYMMpwN0Of.rtcpXbFH09H94iyfFRLO\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {\n                \"organizationId\": null,\n                \"siteId\": null,\n                \"departmentId\": null\n            }\n        }\n    }\n}"
						},
						{
							"name": "Expired Refresh Token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Surrogate-Control",
									"value": "no-store"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=5184000; includeSubDomains"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "129"
								},
								{
									"key": "ETag",
									"value": "W/\"81-oNnrN/HyeG/bhFHcV+OfwC5ojHY\""
								},
								{
									"key": "Date",
									"value": "Mon, 14 Feb 2022 17:40:54 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"InvalidRefreshToken\",\n    \"code\": \"InvalidRefreshToken\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid grant: refresh token has expired\"\n}"
						},
						{
							"name": "Invalid Refresh Token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "Surrogate-Control",
									"value": "no-store"
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=5184000; includeSubDomains"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "128"
								},
								{
									"key": "ETag",
									"value": "W/\"80-kySmwrGRJSsmDVam4jT/OUcqZyY\""
								},
								{
									"key": "Date",
									"value": "Mon, 14 Feb 2022 17:41:14 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"InvalidRefreshToken\",\n    \"code\": \"InvalidRefreshToken\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid grant: refresh token is invalid\"\n}"
						}
					]
				}
			],
			"description": "Allows users to request and refresh access tokens.",
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "democlientsecret",
						"type": "string"
					},
					{
						"key": "username",
						"value": "democlient",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User Test",
			"item": [
				{
					"name": "Profile Test",
					"item": [
						{
							"name": "Fetch Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"role\", jsonData.response.user.role);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username1}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password1}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Fetch Self User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var userId = pm.collectionVariables.get(\"user_id\");",
											"console.log(\"User Id is: \"+userId)",
											"var UserName = pm.collectionVariables.get(\"username\");",
											"///var UserEmail = pm.environment.get(\"userEmail\")",
											"var UserFirstName = pm.collectionVariables.get(\"firstname\");",
											"var UserLastName = pm.collectionVariables.get(\"lastname\");",
											"",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.data.me).to.includes.keys('id', 'firstname','lastname','username','addresses');",
											"});",
											"",
											"// API assertion",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"// Verify the user id should be the same",
											"tests[\"Verify the user id is \"+ userId] = jsonData.data.me.id === userId;",
											"",
											"// Verify that username should be the same ",
											"tests[\"Username is \" + UserName] = jsonData.data.me.username === UserName;",
											"",
											"// Verify that user Email should be the same ",
											"//tests[\"User Email is \" + UserEmail] = jsonData.data.me.addresses[0].address === UserEmail;",
											"",
											"// Verify that user's first name should be the same ",
											"tests[\"First Name is \" + UserFirstName] = jsonData.data.me.firstname === UserFirstName;",
											"",
											"// Verify that user's Last name should be the same ",
											"tests[\"Last Name is \" + UserLastName] = jsonData.data.me.lastname === UserLastName;",
											"pm.collectionVariables.set(\"address\", jsonData.data.me.addresses[0].address);",
											"var EmailAddress = pm.collectionVariables.get(\"address\");",
											"console.log(EmailAddress)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query self {\n    me {\n        ...FullUserFragment\n    }\n}\n\nfragment FullUserFragment on FullUser {\n    id\n    firstname\n    lastname\n    username\n    # departments {\n    #     id\n    #     name\n    # }\n    role\n\n    # statusResetFields\n    # profilePic {\n    #     url\n    # }\n    # inviteCode\n    # status\n    # workStatus\n    # statusExpiryDate\n    # inviteCodes {\n    #      ...InviteCodeFragment\n    # }\n    addresses {\n        address\n        type\n        access\n    }\n}\n\n# fragment InviteCodeFragment on InviteCode {\n#     id\n#     code\n#     maxInvites\n#     invitesRemaining\n#     expiresAt\n#     createdAt\n#     updatedAt\n# }",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Allow to fetch information about own user"
							},
							"response": []
						},
						{
							"name": "Fetch User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse = pm.response.json();",
											"var UserId = pm.collectionVariables.get(\"user_id\");",
											"var userId=pm.collectionVariables.get(\"user_id\");",
											"console.log(\"User Id is: \"+userId)",
											"var FirstName = pm.collectionVariables.get(\"firstname\");",
											"var LastName = pm.collectionVariables.get(\"lastname\");",
											"var Username = pm.collectionVariables.get(\"username\");",
											"var UserRole = pm.collectionVariables.get(\"role\");",
											"",
											"",
											"",
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Verify the user id is same",
											"tests[\"The user id is \"+ UserId] = jsonResponse.data.profile.id === UserId ;",
											"",
											"//Verify the username is same",
											"tests[\"The username is \"+ Username] = jsonResponse.data.profile.username === Username ;",
											"",
											"//Verify the user's firstname is same",
											"tests[\"The user's firstname is \"+ FirstName] = jsonResponse.data.profile.firstname === FirstName ;",
											"",
											"//Verify the user's lastname is same",
											"tests[\"The user's lastname is \"+ LastName] = jsonResponse.data.profile.lastname === LastName ;",
											"",
											"//Verify the user's Role is same",
											"tests[\"The user's role is \"+ UserRole] = jsonResponse.data.profile.role === UserRole ;",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"type": "text",
										"value": "{{scopetoken}}",
										"disabled": true
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetUser($userId: ID!) {\n    profile(id: $userId) {\n        ...PublicUserFragment\n    }\n}\n\nfragment PublicUserFragment on PublicUser {\n    id\n    firstname\n    lastname\n    username\n    role\n    profilePic {\n        url\n    }\n    status\n    workStatus\n    statusExpiryDate\n}",
										"variables": "\n{\n    \"userId\": \"{{user_id}}\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Allow to fetch information about own user"
							},
							"response": []
						},
						{
							"name": "Update Profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"UpdatedFirstName\", \"Automation\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse = pm.response.json();",
											"var UpdatedFirstName = pm.collectionVariables.get(\"UpdatedFirstName\");",
											"var user_id = pm.collectionVariables.get(\"user_id\");",
											"var UserFirstName = pm.collectionVariables.get(\"firstname\");",
											"var userLastName = pm.collectionVariables.get(\"lastname\");",
											"var username = pm.collectionVariables.get(\"username\");",
											"var role = pm.collectionVariables.get(\"role\");",
											"",
											"",
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Verify the userID should be same",
											"tests[\"Verify the user id is \"+user_id] = jsonResponse.data.self.updateProfile.id === user_id ;",
											"",
											"//Verify the first name should be updated",
											"tests[\"Verify the updated First Name is \"+UpdatedFirstName] = jsonResponse.data.self.updateProfile.firstname === UpdatedFirstName ;",
											"",
											"//Verify the last name should be same",
											"tests[\"Verify the Last Name is \"+userLastName] = jsonResponse.data.self.updateProfile.lastname === userLastName ;",
											"",
											"//Verify the username should be same",
											"tests[\"Verify the userame is \"+username] = jsonResponse.data.self.updateProfile.username === username ;",
											"",
											"//Verify the user's role should be same",
											"tests[\"Verify the user's role is \"+role] = jsonResponse.data.self.updateProfile.role === role ;",
											"",
											"//Verify the base structure",
											"pm.test(\"Verify base_structure\", function () {",
											"",
											"    pm.expect(jsonResponse.data.self.updateProfile).to.includes.keys('id','username','firstname','lastname','role');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateProfile($profileInfo: UserDetails!) {\n    self {\n        updateProfile(details: $profileInfo) {\n            ...FullUserFragment\n        }\n    }\n}\n\nfragment FullUserFragment on FullUser {\n    id\n    username\n    firstname\n    lastname\n    role\n}",
										"variables": "{\n\t\"profileInfo\": {\n\t\t\"firstname\": \"{{UpdatedFirstName}}\"\n\t}\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch User Profile after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse = pm.response.json();",
											"var UserId = pm.collectionVariables.get(\"user_id\");",
											"var userId=pm.collectionVariables.get(\"user_id\");",
											"console.log(\"User Id is: \"+userId)",
											"var FirstName = pm.collectionVariables.get(\"firstname\");",
											"var UpdatedFirstName = pm.collectionVariables.get(\"UpdatedFirstName\");",
											"console.log(\"UpdatedFirstName: \"+UpdatedFirstName)",
											"",
											"var LastName = pm.collectionVariables.get(\"lastname\");",
											"var Username = pm.collectionVariables.get(\"username\");",
											"var UserRole = pm.collectionVariables.get(\"role\");",
											"",
											"",
											"",
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Verify the user id is same",
											"tests[\"The user id is \"+ UserId] = jsonResponse.data.profile.id === UserId ;",
											"",
											"//Verify the username is same",
											"tests[\"The username is \"+ Username] = jsonResponse.data.profile.username === Username ;",
											"",
											"//Verify the user's firstname is same",
											"tests[\"The user's firstname is \"+ UpdatedFirstName] = jsonResponse.data.profile.firstname === UpdatedFirstName ;",
											"",
											"//Verify the user's lastname is same",
											"tests[\"The user's lastname is \"+ LastName] = jsonResponse.data.profile.lastname === LastName ;",
											"",
											"//Verify the user's Role is same",
											"tests[\"The user's role is \"+ UserRole] = jsonResponse.data.profile.role === UserRole ;",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"type": "text",
										"value": "{{scopetoken}}",
										"disabled": true
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetUser($userId: ID!) {\n    profile(id: $userId) {\n        ...PublicUserFragment\n    }\n}\n\nfragment PublicUserFragment on PublicUser {\n    id\n    firstname\n    lastname\n    username\n    role\n    profilePic {\n        url\n    }\n    status\n    workStatus\n    statusExpiryDate\n}",
										"variables": "\n{\n    \"userId\": \"{{user_id}}\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Allow to fetch information about own user"
							},
							"response": []
						},
						{
							"name": "Revert back Updated Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var firstName = pm.collectionVariables.get(\"firstname\");",
											"var jsonResponse = pm.response.json();",
											"",
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"//Verify the first name should be updated",
											"tests[\"Verify the updated First Name is \"+firstName] = jsonResponse.data.self.updateProfile.firstname === firstName ;",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.collectionVariables.get(\"firstname\");",
											"pm.collectionVariables.set(\"firstName\",firstName);",
											"console.log(firstName);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateProfile($profileInfo: UserDetails!) {\n    self {\n        updateProfile(details: $profileInfo) {\n            ...FullUserFragment\n        }\n    }\n}\n\nfragment FullUserFragment on FullUser {\n    id\n    username\n    firstname\n    lastname\n}",
										"variables": "{\n\t\"profileInfo\": {\n\t\t\"firstname\": \"{{firstName}}\"\n\t}\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Status Test",
					"item": [
						{
							"name": "Fetch Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"role\", jsonData.response.user.role);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username1}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password1}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Update User Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Description\", \"Add status from Postman\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse = pm.response.json();",
											"var Description= pm.collectionVariables.get(\"Description\");",
											"var UserId= pm.collectionVariables.get(\"user_id\");",
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Verify the base structure",
											"pm.test(\"Verify base_structure\", function () {",
											"",
											"    pm.expect(jsonResponse.data.user.status).to.includes.keys('id','username','status','workStatus','statusDescription','statusExpiryDate');",
											"});",
											"//Verify the userID is same",
											"tests[\"Verify the user Id is same\"] = jsonResponse.data.user.status.id === UserId ;",
											"",
											"//Verify the workStatus ",
											"tests[\"Verify the work status is unavailable\" ] = jsonResponse.data.user.status.workStatus === \"unavailable\" ;",
											"",
											"//Verify the status Description  ",
											"tests[\"Verify the status description is same\" ] = jsonResponse.data.user.status.statusDescription === Description ;",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateUserStatus($status: WorkStatus, $description: String, $proxyId: ID, $startDate: String, $endDate: String, $resetFields: [UserStatusField!]) {\n    user {\n        status(newStatus: $status, statusDescription: $description, proxyId: $proxyId, startDate: $startDate, endDate: $endDate, resetFields: $resetFields) {\n            ...FullUserFragment\n        }\n    }\n}\n\nfragment FullUserFragment on GeneralUser {\n    id\n    username\n    status\n    workStatus\n    statusExpiryDate\n    statusDescription\n}",
										"variables": "{\n    \"status\": \"unavailable\",\n    \"description\": \"{{Description}}\",\n    \"resetFields\": [\"alternate_contact\"]\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								}
							},
							"response": [
								{
									"name": "Update User Status",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdateUserStatus($status: WorkStatus, $description: String, $proxyId: ID, $startDate: String, $endDate: String, $resetFields: [UserStatusField!]) {\n    user {\n        status(newStatus: $status, statusDescription: $description, proxyId: $proxyId, startDate: $startDate, endDate: $endDate, resetFields: $resetFields) {\n            ...FullUserFragment\n        }\n    }\n}\n\nfragment FullUserFragment on GeneralUser {\n    id\n    username\n    status\n    workStatus\n    statusExpiryDate\n}",
												"variables": "{\n    \"status\": \"on_shift\",\n    \"description\": \"This is an unavailable status\",\n    \"endDate\": \"2021-07-25T10:54:14.000Z\",\n    \"resetFields\": [\n        \"status_message\",\n        \"alternate_contact\"\n    ]\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": null
								}
							]
						},
						{
							"name": "Fetch User after Update Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse = pm.response.json();",
											"var UserId = pm.collectionVariables.get(\"user_id\");",
											"var userId=pm.collectionVariables.get(\"user_id\");",
											"console.log(\"User Id is: \"+userId)",
											"var FirstName = pm.collectionVariables.get(\"firstname\");",
											"var LastName = pm.collectionVariables.get(\"lastname\");",
											"var Username = pm.collectionVariables.get(\"username\");",
											"var UserRole = pm.collectionVariables.get(\"role\");",
											"var Description= pm.collectionVariables.get(\"Description\");",
											"",
											"",
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Verify the user id is same",
											"tests[\"The user id is \"+ UserId] = jsonResponse.data.profile.id === UserId ;",
											"",
											"//Verify the username is same",
											"tests[\"The username is \"+ Username] = jsonResponse.data.profile.username === Username ;",
											"",
											"//Verify the user's firstname is same",
											"tests[\"The user's firstname is \"+ FirstName] = jsonResponse.data.profile.firstname === FirstName ;",
											"",
											"//Verify the user's lastname is same",
											"tests[\"The user's lastname is \"+ LastName] = jsonResponse.data.profile.lastname === LastName ;",
											"",
											"//Verify the user's Role is same",
											"tests[\"The user's role is \"+ UserRole] = jsonResponse.data.profile.role === UserRole ;",
											"",
											"tests[\"Verify user status should be same\"] = jsonResponse.data.profile.statusDescription === Description ;",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"type": "text",
										"value": "{{scopetoken}}",
										"disabled": true
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetUser($userId: ID!) {\n    profile(id: $userId) {\n        ...PublicUserFragment\n    }\n}\n\nfragment PublicUserFragment on PublicUser {\n    id\n    firstname\n    lastname\n    username\n    role\n    profilePic {\n        url\n    }\n    status\n    workStatus\n    statusExpiryDate\n    statusDescription\n}",
										"variables": "\n{\n    \"userId\": \"{{user_id}}\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Allow to fetch information about own user"
							},
							"response": []
						}
					]
				},
				{
					"name": "Change Password Test",
					"item": [
						{
							"name": "Fetch Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"role\", jsonData.response.user.role);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username1}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password1}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Change password with wrong Old Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse = pm.response.json();",
											"",
											"//API status code assertion",
											"// pm.test(\"Status code is 200\", function () {",
											"//     pm.response.to.have.status(200);",
											"// });",
											"",
											"//Verify the validation message",
											"tests[\"Verify the validation message\"] = jsonResponse.errors[0].message=== \"Old password is incorrect\" ;",
											"",
											"//Verify the status code of API",
											"tests[\"Verify the status code of API is 400\"] = jsonResponse.errors[0].statusCode=== 400 ;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ChangePassword($oldPassword: String!, $newPassword: String!) {\n    self {\n        changePassword(oldPassword: $oldPassword, newPassword: $newPassword)\n    }\n}",
										"variables": "{\n    \"oldPassword\": \"password\",\n    \"newPassword\": \"test123!!\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								}
							},
							"response": [
								{
									"name": "Vulnerable Password Detected",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ChangePassword($oldPassword: String!, $newPassword: String!) {\n    self {\n        changePassword(oldPassword: $oldPassword, newPassword: $newPassword)\n    }\n}",
												"variables": "{\n    \"oldPassword\": \"test123!\",\n    \"newPassword\": \"password\"\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"Vulnerable password detected\",\n            \"name\": \"VulnerablePassword\",\n            \"code\": \"VulnerablePassword\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								}
							]
						},
						{
							"name": "Change Password with correct old password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var oldPassword = pm.environment.get(\"password1\");",
											"",
											"pm.collectionVariables.set(\"old_password\", oldPassword);",
											"pm.collectionVariables.set(\"changed_password\", \"password123!\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse = pm.response.json();",
											"",
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Verify the password should change successfully",
											"tests[\"Verify the change password is true\"] = jsonResponse.data.self.changePassword === true ;",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ChangePassword($oldPassword: String!, $newPassword: String!) {\n    self {\n        changePassword(oldPassword: $oldPassword, newPassword: $newPassword)\n    }\n}",
										"variables": "{\n    \"oldPassword\": \"{{old_password}}\",\n    \"newPassword\": \"{{changed_password}}\"\n}\n"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								}
							},
							"response": [
								{
									"name": "Vulnerable Password Detected",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ChangePassword($oldPassword: String!, $newPassword: String!) {\n    self {\n        changePassword(oldPassword: $oldPassword, newPassword: $newPassword)\n    }\n}",
												"variables": "{\n    \"oldPassword\": \"test123!\",\n    \"newPassword\": \"password\"\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"Vulnerable password detected\",\n            \"name\": \"VulnerablePassword\",\n            \"code\": \"VulnerablePassword\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								}
							]
						},
						{
							"name": "Fetch Access Token  By using New Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"newPassword_token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"role\", jsonData.response.user.role);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username1}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{changed_password}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Revert back to Old Password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text",
										"disabled": true
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{newPassword_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ChangePassword($oldPassword: String!, $newPassword: String!) {\n    self {\n        changePassword(oldPassword: $oldPassword, newPassword: $newPassword)\n    }\n}",
										"variables": "{\n    \"oldPassword\": \"{{changed_password}}\",\n    \"newPassword\": \"{{old_password}}\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								}
							},
							"response": [
								{
									"name": "Vulnerable Password Detected",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ChangePassword($oldPassword: String!, $newPassword: String!) {\n    self {\n        changePassword(oldPassword: $oldPassword, newPassword: $newPassword)\n    }\n}",
												"variables": "{\n    \"oldPassword\": \"test123!\",\n    \"newPassword\": \"password\"\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"Vulnerable password detected\",\n            \"name\": \"VulnerablePassword\",\n            \"code\": \"VulnerablePassword\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								}
							]
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Send Page & SMS Test",
					"item": [
						{
							"name": "Fetch Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"role\", jsonData.response.user.role);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username1}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password1}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Send Page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse = pm.response.json();",
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Verify the base structure",
											"pm.test(\"Verify base_structure\", function () {",
											"",
											"    pm.expect(jsonResponse.data.self).to.includes.keys('page');",
											"});",
											"",
											"",
											"//Verify the page should be true",
											"//tests[\"The Page is true\"] = jsonResponse.data.self.page === true ;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation SendPage($userId: ID!, $callback: String) {\n    self {\n        page(userId: $userId, callback: $callback)\n    }\n}",
										"variables": "{\n\t\"userId\": \"{{user_id}}\",\n\t\"callback\": \"6476784076\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send SMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonResponse = pm.response.json();",
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Verify the base structure",
											"pm.test(\"Verify base_structure\", function () {",
											"",
											"    pm.expect(jsonResponse.data.self).to.includes.keys('sms');",
											"});",
											"",
											"",
											"//Verify the sms should be true",
											"//tests[\"The Page is true\"] = jsonResponse.data.self.sms === true ;",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"User_SMS\", \"Callback number: 1234\");",
											"pm.collectionVariables.set(\"phone\", \"+16188521713\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"type": "text",
										"value": "{{scopetoken}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation SendPage($userId: ID!, $address: String!, $message: String!) {\n    self {\n        sms(userId: $userId, address: $address, message: $message)\n    }\n}",
										"variables": "{\n\t\"userId\": \"{{user_id}}\",\n\t\"address\": \"{{phone}}\",\n\t\"message\": \"{{User_SMS}}\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Webhook Test",
					"item": [
						{
							"name": "Fetch Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"role\", jsonData.response.user.role);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username1}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password1}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Register Webhook",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var webhook = \"https://lbgd1cseni.execute-api.ca-central-1.amazonaws.com/prod/chat\";",
											"var jsonResponse = pm.response.json();",
											"",
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Verify the url should be same",
											"tests[\"Verify the url should be same\"] = jsonResponse.data.self.registerWebhook.url === webhook ;",
											"",
											"//Verify the base structure",
											"pm.test(\"Verify base_structure\", function () {",
											"",
											"    pm.expect(jsonResponse.data.self.registerWebhook).to.includes.keys('url', 'createdAt','updatedAt');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation RegisterWebhook($url: String!) {\n    self {\n        registerWebhook(url: $url) {\n            url\n            createdAt\n            updatedAt\n        }\n    }\n}",
										"variables": "{\n\t\"url\": \"https://lbgd1cseni.execute-api.ca-central-1.amazonaws.com/prod/chat\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Webhook",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetWebhook {\n    me {\n        webhook {\n            url\n            createdAt\n            updatedAt\n        }\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unregister Webhook",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var jsonResponse = pm.response.json();",
											"",
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Verify the value of unregisterWebhook",
											"tests[\"Verify the unregisterWebhook is true\"] = jsonResponse.data.self.unregisterWebhook ===  true ;",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UnregisterWebhook {\n    self {\n        unregisterWebhook\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "Again Unregister Webhook",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var webhook = \"https://lbgd1cseni.execute-api.ca-central-1.amazonaws.com/prod/chat\";",
											"var jsonResponse = pm.response.json();",
											"",
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Verify the value of unregisterWebhook",
											"tests[\"Verify the unregisterWebhook is false\"] = jsonResponse.data.self.unregisterWebhook ===  false ;",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UnregisterWebhook {\n    self {\n        unregisterWebhook\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Webhook",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetWebhook {\n    me {\n        webhook {\n            url\n            createdAt\n            updatedAt\n        }\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Chat Test",
			"item": [
				{
					"name": "Send Message Test",
					"item": [
						{
							"name": "Fetch Access Token to create a chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"role\", jsonData.response.user.role);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username1}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password1}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Fetch message receiver user's Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"Second_api_bearer\", jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"Second_refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"Second_username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"Second_firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"Second_lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"Second_user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"Second_role\", jsonData.response.user.role);",
											"",
											"let user_id =pm.collectionVariables.get(\"Second_user_id\");",
											"console.log(\"Second_user_id: \"+user_id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username2}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password2}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Create Chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
											"tests[\"[INFO] Response: \" + responseBody] = true;",
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.createChat;",
											"",
											"pm.collectionVariables.set(\"chat_id\", response.id);",
											"  pm.test(\"Verify base_structure of createChat \", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.createChat).to.includes.keys('id', 'title','members','lastMessage','lastUnreadMessage', 'unreadPriorityMessages');",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createChat($memberIds: [ID!]!, $title: String) {\n    createChat(members: $memberIds, title: $title) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n\nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}",
										"variables": "{\n\t\"memberIds\": [\"{{Second_user_id}}\"]\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Create a new chat. If chat matching similar pattern already exists then returns existing chat.\n\n__@params__  </br>\nmemberIds - an array of ids of the users we want in the chat </br>\ntitle - the initial title of the chat </br>\n\n__@return__ chat object with the specified params"
							},
							"response": [
								{
									"name": "Cant Start Chat with Shell Account",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createChat($memberIds: [ID!]!, $title: String) {\n    createChat(members: $memberIds, title: $title) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n\nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}",
												"variables": "{\n\t\"memberIds\": [\"37a5834d-df8e-4740-939d-62cc3bd99ba2\"]\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 23 Mar 2022 16:10:43 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "221"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"Can't start chat with shell account\",\n            \"name\": \"InvalidOperationShellAccount\",\n            \"code\": \"InvalidOperationShellAccount\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								}
							]
						},
						{
							"name": "Fetch Chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" let jsonBody = pm.response.json();",
											" let chatId = pm.collectionVariables.get(\"chat_id\");",
											" var senderId = pm.collectionVariables.get(\"user_id\");",
											" var receiverId = pm.collectionVariables.get(\"Second_user_id\");",
											" var senderusername = pm.collectionVariables.get(\"username\");",
											" var receiverUsername = pm.collectionVariables.get(\"Second_username\");",
											"",
											"let Message = pm.collectionVariables.get(\"message\");",
											" let Ids = [receiverId,senderId];",
											" let usernames = [receiverUsername,senderusername];",
											" console.log(\"Ids are: \"+Ids);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify base_structure of chat\", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat).to.includes.keys('id', 'title','type','muted','image', 'members','lastMessage','lastUnreadMessage','unreadPriorityMessages');",
											"});",
											"tests[\"Verify that the chatId should be same\"] = jsonBody.data.chat.id === chatId;",
											"",
											"if(Ids[0] === jsonBody.data.chat.members[0].id) {",
											"    testMembers(1,1);",
											"    testMembers(0,0);",
											"} else if (Ids[0] === jsonBody.data.chat.members[1].id) {",
											"    testMembers(1,0);",
											"    testMembers(0,1);",
											"}",
											"",
											"function testMembers(idsIndx, index) {",
											"    pm.test(\"Verify base_structure of members\", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat.members[idsIndx]).to.includes.keys('id', 'firstname','lastname','username','addresses');",
											"    });",
											"",
											"    tests[\"Verify that sender and receiverId should be same:\"+ Ids[idsIndx]] = jsonBody.data.chat.members[index].id === Ids[idsIndx];",
											"",
											"    tests[\"Verify that sender and receiver usernames should be same:\"+ usernames[idsIndx]] = jsonBody.data.chat.members[index].username === usernames[idsIndx];",
											"}",
											"",
											"pm.test(\"Verify base_structure of last message\", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat.lastMessage).to.includes.keys('id', 'type','message','sender','dateCreated');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query fetchChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    type\n    muted\n    image {\n        ...AttachmentFragment\n    }\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n \n \nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n    addresses {\n        id\n        address\n        type\n        access\n        ordinal\n    }\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n}",
										"variables": "{\n\t\"chatId\": \"{{chat_id}}\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Fetch chat referenced by given id.\n\n__@params__ chatId - id of the chat </br>\n__@return__ chat object with specified id"
							},
							"response": [
								{
									"name": "Fetch Chat - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fetchChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    image {\n        ...AttachmentFragment\n    }\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n \n \nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n    addresses {\n        id\n        address\n        type\n        access\n        ordinal\n    }\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n}",
												"variables": "{\n\t\"chatId\": \"9b98216c-76af-4402-bcc4-1d8415234485\"\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 09 Oct 2020 16:21:21 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4393"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"chat\": {\n            \"id\": \"9b98216c-76af-4402-bcc4-1d8415234485\",\n            \"title\": null,\n            \"image\": null,\n            \"members\": [\n                {\n                    \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n                    \"username\": \"umarazhar\",\n                    \"firstname\": \"Umar\",\n                    \"lastname\": \"Azhar\",\n                    \"addresses\": [\n                        {\n                            \"id\": \"dW1hckBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hciszQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+3@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcis1QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+5@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcis2Mjg4MkBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+62882@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitmZWhpdXI1NzJAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+fehiur572@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitoaWVqNjgzOEBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+hiej6838@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitqbDJramxrZnM1YXNAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+jl2kjlkfs5as@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitqbDJramxrZnM1YXNhQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+jl2kjlkfs5asa@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitsa2Fqc2RsMjM0MkBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+lkajsdl2342@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmcyQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org2@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmczQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org3@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmc0QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org4@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmc1QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org5@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcit0ZXNsa2FqZmRAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+teslkajfd@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"d15a26df-483c-4baf-8606-d7dee3076859\",\n                    \"username\": \"chilli12\",\n                    \"firstname\": \"Chinni12\",\n                    \"lastname\": \"chilli\",\n                    \"addresses\": []\n                }\n            ],\n            \"lastMessage\": {\n                \"id\": 146701,\n                \"type\": \"text\",\n                \"message\": \"Test\",\n                \"sender\": {\n                    \"id\": \"d15a26df-483c-4baf-8606-d7dee3076859\",\n                    \"username\": \"chilli12\",\n                    \"firstname\": \"Chinni12\",\n                    \"lastname\": \"chilli\",\n                    \"addresses\": []\n                },\n                \"dateCreated\": \"2019-12-18T17:06:49.942Z\"\n            },\n            \"lastUnreadMessage\": null,\n            \"unreadPriorityMessages\": []\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Send Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
											"tests[\"[INFO] Response: \" + responseBody] = true;",
											"",
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.chat.sendMessage;",
											"let Message = pm.collectionVariables.get(\"Message\");",
											"let senderId= pm.collectionVariables.get(\"user_id\");",
											"let senderUsername =pm.collectionVariables.get(\"username\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify base_structure of chat\", function () ",
											"       {",
											"",
											"    pm.expect(response).to.includes.keys('id', 'image','attachment','message','type', 'sender');",
											"});",
											"",
											"tests[\"Verify that there should be a valid sendMessage Id\"] = response.id !== null || response.id !== undefined ;",
											"tests[\"Verify that the message should be same\"] = response.message ===Message;",
											"tests[\"Verify that the message type should be text\"] = response.type ===\"text\";",
											"tests[\"Verify that the senderId should be same\"] = response.sender.id ===senderId;",
											"tests[\"Verify that the sender's username should be same\"] = response.sender.username ===senderUsername;",
											"",
											"pm.collectionVariables.set(\"SendMessageId\", response.id);",
											"let MessageID = pm.collectionVariables.get(\"SendMessageId\");",
											"console.log(\"Message ID is \"+MessageID)",
											"pm.collectionVariables.set(\"msgId\", response.id);",
											"let MsgId = pm.collectionVariables.get(\"msgId\");",
											"console.log(\"MessageID is \"+MsgId)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Message\", \"BE Automation testing\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"type": "text",
										"value": "{{scopetoken}}"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
										"variables": "{\n\t\"chatId\": \"{{chat_id}}\",\n\t\"message\": \"{{Message}}\",\n\t\"priority\": false\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Send message to specified chat\n\n__@params__  </br>\nchatId - the id of the chat we are sending the message to </br>\nmessage - the message we are sending </br>\n__@optional__ fileId - an id referencing the uploaded file on our S3 bucket (e.g. for file/picture messages). See __'Upload Files'__ </br>\ntype - the type of message we are sending (e.g. image, text, attachment) </br>\npriority - states whether or not the message is of high priority </br>\n\n__@return__ message object with specified parameters"
							},
							"response": [
								{
									"name": "User Not Member of Chat",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "196"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:14:24 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"User is not a member of chat\",\n            \"name\": \"UserNotMemberOfChat\",\n            \"code\": \"UserNotMemberOfChat\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								},
								{
									"name": "Access Token Expired",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "ETag",
											"value": "W/\"7e-GtRgWhqN7iKqYzLxAnMatoGWiNs\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:14:54 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidAccessToken\",\n    \"code\": \"InvalidAccessToken\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid token: access token has expired\"\n}"
								},
								{
									"name": "Invalid Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "125"
										},
										{
											"key": "ETag",
											"value": "W/\"7d-X5Hlvs/k/IQ8lqjZMIqbDZW5bJc\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:15:29 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidAccessToken\",\n    \"code\": \"InvalidAccessToken\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid token: access token is invalid\"\n}"
								},
								{
									"name": "Unauthorized Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "134"
										},
										{
											"key": "ETag",
											"value": "W/\"86-XDfIF2OBPyJh78GyxeEU0/dYOYY\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:15:43 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"UnauthorizedRequest\",\n    \"code\": \"UnauthorizedRequest\",\n    \"statusCode\": 401,\n    \"message\": \"Unauthorized request: no authentication given\"\n}"
								}
							]
						},
						{
							"name": "Fetch Messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.chat.messages;",
											"let MessageID = pm.collectionVariables.get(\"SendMessageId\");",
											"console.log(\"Message ID is \"+MessageID)",
											"",
											"let Message = pm.collectionVariables.get(\"Message\");",
											"let username = pm.collectionVariables.get(\"username\");",
											"var senderId = pm.collectionVariables.get(\"user_id\");",
											"",
											"console.log(\"Message is \"+Message)",
											"if (pm.response.code === 200) ",
											"{",
											"pm.test(\"Fetch total number of messages\", function(){",
											"    let messages = jsonBody.data.chat.messages.messages.length;",
											"    console.log(\"Total number of messages are:\", messages)",
											"});",
											" ",
											"",
											"    for(let i=0;i<response.messages.length;i++){",
											"     console.log(response.messages[i].message);",
											"",
											"pm.test(\"Verify base_structure of message: \"+response.messages[i].id, function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat.messages.messages[i]).to.includes.keys('id', 'priority','message','image','type', 'template','attachment','dateCreated','sender','deliveredTo','readBy','repliedTo','data');",
											"});",
											"",
											"tests[\"Verify that the dateCreated should not be empty or null (having messageId:\" +response.messages[i].id+\")\"] = response.messages[i].dateCreated !== null || response.messages[i].dateCreated !== undefined || response.messages[i].dateCreated !== \"\";",
											"",
											"",
											"pm.test(\"Verify the base structure of last deliveredTo: \"+response.messages[i].deliveredTo[0].messageId , function () ",
											"       {",
											"",
											"    pm.expect(response.messages[i].deliveredTo[0]).to.includes.keys('messageId', 'user','timestamp');",
											"});",
											"",
											"pm.test(\"Verify the base structure of last readBy: \"+response.messages[i].readBy[0].messageId, function () ",
											"       {",
											"",
											"    pm.expect(response.messages[i].readBy[0]).to.includes.keys('messageId', 'user','timestamp');",
											"});",
											"    }",
											"    ",
											"tests[\"Verify that the recently sent message Id should be same\"] = response.messages[0].id ===MessageID;",
											"tests[\"Verify that the recently sent message should be same\"] = response.messages[0].message ===Message;",
											"tests[\"Verify that the last sent message type should be text\"] = response.messages[0].type ===\"text\";",
											"tests[\"Verify that the username of last sent message should be same\"] = response.messages[0].sender.username === username;",
											"tests[\"Verify that the senderId of last sent message should be same\"] = response.messages[0].sender.id === senderId;",
											"tests[\"Verify that the recently deliveredTo message Id should be same\"] = response.messages[0].deliveredTo[0].messageId ===MessageID;",
											"",
											"",
											"pm.test(\"Verify the base structure of last sender\", function () ",
											"       {",
											"",
											"    pm.expect(response.messages[0].sender).to.includes.keys('id', 'firstname','lastname','username','email', 'phonenumber','role','profilePic','workStatus','statusDescription','workStatusProxy');",
											"});",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query fetchMessages ($chatId: ID!, $continuationId: Int, $limit: Int, $direction: PaginationDirection) {\n    chat(chatId: $chatId) {\n        messages(continuationId: $continuationId, limit: $limit, direction: $direction) {\n            messages {\n                ...messageFields\n            }\n        }\n    }\n}\n\nfragment messageFields on Message {\n    id\n    priority\n    message\n    image\n    type\n    template {\n        id\n        formTitle\n        requestTitle\n    }\n    attachment {\n        ...AttachmentFragment\n    }\n    dateCreated\n    sender {\n        ...publicUserFields\n    }\n    deliveredTo {\n        ...deliveryReceiptFields\n    }\n    readBy {\n        ...readReceiptFields\n    }\n    repliedTo {\n        id\n    }\n    data {\n        __typename ... on ConsultMessageData {\n            mrn\n            firstname\n            lastname\n            details\n        }\n    }\n}\n\nfragment readReceiptFields on ReadReceipt {\n    messageId\n    user {\n        ...publicUserFields\n    }\n    timestamp\n}\n\nfragment deliveryReceiptFields on DeliveryReceipt {\n    messageId\n    user {\n        ...publicUserFields\n    }\n    timestamp\n}\n\nfragment publicUserFields on PublicUser {\n    id\n    firstname\n    lastname\n    username\n    email\n    phonenumber\n    role\n    profilePic {\n        url\n    }\n    workStatus\n    statusDescription\n    workStatusProxy {\n        ...publicUserStatusFields\n    }\n}\n\nfragment publicUserStatusFields on PublicUser {\n    id\n    firstname\n    lastname\n    username\n    phonenumber\n    role\n    profilePic {\n        url\n    }\n}\n\nfragment AttachmentFragment on File {\n    id\n    url\n    mimeType\n    fileName\n    blob\n}\n",
										"variables": "{\n\t\"chatId\": \"{{chat_id}}\",\n\t\"direction\": \"previous\",\n    \"limit\": 5\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Fetch paginated messages for chat referenced by given id. </br>\n__Note__: This endpoint only paginates upwards.\n\n__@params__  </br>\nchatId - the id referencing the chat to fetch messages for </br>\ncontinuationId - the id of the message to start paginating from </br>\nlimit - the number of messages to load </br>\n\n__@return__ a list of messages"
							},
							"response": []
						},
						{
							"name": "Fetch Chat after send message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" let jsonBody = pm.response.json();",
											" let chatId = pm.collectionVariables.get(\"chat_id\");",
											" var senderId = pm.collectionVariables.get(\"user_id\");",
											" var receiverId = pm.collectionVariables.get(\"Second_user_id\");",
											" var senderusername = pm.collectionVariables.get(\"username\");",
											" var receiverUsername = pm.collectionVariables.get(\"Second_username\");",
											"",
											"let Message = pm.collectionVariables.get(\"message\");",
											" let Ids = [receiverId,senderId];",
											" let usernames = [receiverUsername,senderusername];",
											" console.log(\"Ids are: \"+Ids);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify base_structure of chat\", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat).to.includes.keys('id', 'title','type','muted','image', 'members','lastMessage','lastUnreadMessage','unreadPriorityMessages');",
											"});",
											"tests[\"Verify that the chatId should be same\"] = jsonBody.data.chat.id === chatId;",
											"",
											"if(Ids[0] === jsonBody.data.chat.members[0].id) {",
											"    testMembers(1,1);",
											"    testMembers(0,0);",
											"} else if (Ids[0] === jsonBody.data.chat.members[1].id) {",
											"    testMembers(1,0);",
											"    testMembers(0,1);",
											"}",
											"",
											"function testMembers(idsIndx, index) {",
											"    pm.test(\"Verify base_structure of members\", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat.members[idsIndx]).to.includes.keys('id', 'firstname','lastname','username','addresses');",
											"    });",
											"",
											"    tests[\"Verify that sender and receiverId should be same:\"+ Ids[idsIndx]] = jsonBody.data.chat.members[index].id === Ids[idsIndx];",
											"",
											"    tests[\"Verify that sender and receiver usernames should be same:\"+ usernames[idsIndx]] = jsonBody.data.chat.members[index].username === usernames[idsIndx];",
											"}",
											"",
											"pm.test(\"Verify base_structure of last message\", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat.lastMessage).to.includes.keys('id', 'type','message','sender','dateCreated');",
											"});",
											"",
											"tests[\"Verify that the last message type should be text\"] = jsonBody.data.chat.lastMessage.type === \"text\";",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//let chatId = pm.environment.get(\"Chat_Id\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query fetchChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    type\n    muted\n    image {\n        ...AttachmentFragment\n    }\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n \n \nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n    addresses {\n        id\n        address\n        type\n        access\n        ordinal\n    }\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n}",
										"variables": "{\n\t\"chatId\": \"{{chat_id}}\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Fetch chat referenced by given id.\n\n__@params__ chatId - id of the chat </br>\n__@return__ chat object with specified id"
							},
							"response": [
								{
									"name": "Fetch Chat - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fetchChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    image {\n        ...AttachmentFragment\n    }\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n \n \nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n    addresses {\n        id\n        address\n        type\n        access\n        ordinal\n    }\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n}",
												"variables": "{\n\t\"chatId\": \"9b98216c-76af-4402-bcc4-1d8415234485\"\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 09 Oct 2020 16:21:21 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4393"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"chat\": {\n            \"id\": \"9b98216c-76af-4402-bcc4-1d8415234485\",\n            \"title\": null,\n            \"image\": null,\n            \"members\": [\n                {\n                    \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n                    \"username\": \"umarazhar\",\n                    \"firstname\": \"Umar\",\n                    \"lastname\": \"Azhar\",\n                    \"addresses\": [\n                        {\n                            \"id\": \"dW1hckBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hciszQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+3@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcis1QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+5@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcis2Mjg4MkBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+62882@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitmZWhpdXI1NzJAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+fehiur572@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitoaWVqNjgzOEBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+hiej6838@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitqbDJramxrZnM1YXNAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+jl2kjlkfs5as@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitqbDJramxrZnM1YXNhQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+jl2kjlkfs5asa@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitsa2Fqc2RsMjM0MkBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+lkajsdl2342@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmcyQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org2@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmczQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org3@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmc0QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org4@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmc1QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org5@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcit0ZXNsa2FqZmRAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+teslkajfd@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"d15a26df-483c-4baf-8606-d7dee3076859\",\n                    \"username\": \"chilli12\",\n                    \"firstname\": \"Chinni12\",\n                    \"lastname\": \"chilli\",\n                    \"addresses\": []\n                }\n            ],\n            \"lastMessage\": {\n                \"id\": 146701,\n                \"type\": \"text\",\n                \"message\": \"Test\",\n                \"sender\": {\n                    \"id\": \"d15a26df-483c-4baf-8606-d7dee3076859\",\n                    \"username\": \"chilli12\",\n                    \"firstname\": \"Chinni12\",\n                    \"lastname\": \"chilli\",\n                    \"addresses\": []\n                },\n                \"dateCreated\": \"2019-12-18T17:06:49.942Z\"\n            },\n            \"lastUnreadMessage\": null,\n            \"unreadPriorityMessages\": []\n        }\n    }\n}"
								}
							]
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Reply to Message Test",
					"item": [
						{
							"name": "Fetch Access Token to create a chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"role\", jsonData.response.user.role);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username1}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password1}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Fetch receiver User's Id & Access Token to craete a chat and read message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"api_bearer\", jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"receiver_token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"Second_username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"Second_firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"Second_lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"Second_user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"Second_role\", jsonData.response.user.role);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username2}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password2}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Create Chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
											"tests[\"[INFO] Response: \" + responseBody] = true;",
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.createChat;",
											"",
											"pm.collectionVariables.set(\"chat_id\", response.id);",
											"  pm.test(\"Verify base_structure of createChat \", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.createChat).to.includes.keys('id', 'title','members','lastMessage','lastUnreadMessage', 'unreadPriorityMessages');",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createChat($memberIds: [ID!]!, $title: String) {\n    createChat(members: $memberIds, title: $title) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n\nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}",
										"variables": "{\n\t\"memberIds\": [\"{{Second_user_id}}\"]\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Create a new chat. If chat matching similar pattern already exists then returns existing chat.\n\n__@params__  </br>\nmemberIds - an array of ids of the users we want in the chat </br>\ntitle - the initial title of the chat </br>\n\n__@return__ chat object with the specified params"
							},
							"response": [
								{
									"name": "Cant Start Chat with Shell Account",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createChat($memberIds: [ID!]!, $title: String) {\n    createChat(members: $memberIds, title: $title) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n\nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}",
												"variables": "{\n\t\"memberIds\": [\"37a5834d-df8e-4740-939d-62cc3bd99ba2\"]\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 23 Mar 2022 16:10:43 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "221"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"Can't start chat with shell account\",\n            \"name\": \"InvalidOperationShellAccount\",\n            \"code\": \"InvalidOperationShellAccount\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								}
							]
						},
						{
							"name": "Send Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
											"tests[\"[INFO] Response: \" + responseBody] = true;",
											"",
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.chat.sendMessage;",
											"let Message = pm.collectionVariables.get(\"Message\");",
											"let senderId= pm.collectionVariables.get(\"user_id\");",
											"let senderUsername =pm.collectionVariables.get(\"username\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify base_structure of chat\", function () ",
											"       {",
											"",
											"    pm.expect(response).to.includes.keys('id', 'image','attachment','message','type', 'sender');",
											"});",
											"",
											"tests[\"Verify that there should be a valid sendMessage Id\"] = response.id !== null || response.id !== undefined ;",
											"tests[\"Verify that the message should be same\"] = response.message ===Message;",
											"tests[\"Verify that the message type should be text\"] = response.type ===\"text\";",
											"tests[\"Verify that the senderId should be same\"] = response.sender.id ===senderId;",
											"tests[\"Verify that the sender's username should be same\"] = response.sender.username ===senderUsername;",
											"",
											"pm.collectionVariables.set(\"SendMessageId\", response.id);",
											"let MessageID = pm.collectionVariables.get(\"SendMessageId\");",
											"console.log(\"Message ID is \"+MessageID)",
											"pm.collectionVariables.set(\"msgId\", response.id);",
											"let MsgId = pm.collectionVariables.get(\"msgId\");",
											"console.log(\"MessageID is \"+MsgId)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"Message\", \"BE Automation testing\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"type": "text",
										"value": "{{scopetoken}}"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
										"variables": "{\n\t\"chatId\": \"{{chat_id}}\",\n\t\"message\": \"{{Message}}\",\n\t\"priority\": false\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Send message to specified chat\n\n__@params__  </br>\nchatId - the id of the chat we are sending the message to </br>\nmessage - the message we are sending </br>\n__@optional__ fileId - an id referencing the uploaded file on our S3 bucket (e.g. for file/picture messages). See __'Upload Files'__ </br>\ntype - the type of message we are sending (e.g. image, text, attachment) </br>\npriority - states whether or not the message is of high priority </br>\n\n__@return__ message object with specified parameters"
							},
							"response": [
								{
									"name": "User Not Member of Chat",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "196"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:14:24 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"User is not a member of chat\",\n            \"name\": \"UserNotMemberOfChat\",\n            \"code\": \"UserNotMemberOfChat\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								},
								{
									"name": "Access Token Expired",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "ETag",
											"value": "W/\"7e-GtRgWhqN7iKqYzLxAnMatoGWiNs\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:14:54 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidAccessToken\",\n    \"code\": \"InvalidAccessToken\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid token: access token has expired\"\n}"
								},
								{
									"name": "Invalid Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "125"
										},
										{
											"key": "ETag",
											"value": "W/\"7d-X5Hlvs/k/IQ8lqjZMIqbDZW5bJc\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:15:29 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidAccessToken\",\n    \"code\": \"InvalidAccessToken\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid token: access token is invalid\"\n}"
								},
								{
									"name": "Unauthorized Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "134"
										},
										{
											"key": "ETag",
											"value": "W/\"86-XDfIF2OBPyJh78GyxeEU0/dYOYY\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:15:43 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"UnauthorizedRequest\",\n    \"code\": \"UnauthorizedRequest\",\n    \"statusCode\": 401,\n    \"message\": \"Unauthorized request: no authentication given\"\n}"
								}
							]
						},
						{
							"name": "Read Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"if (pm.response.code === 200) ",
											"{",
											"pm.test(\"All the messages were read\", function(){",
											" let messageRead = jsonBody.data.chat.messagesRead;",
											" console.log(\"The messages are:\", messageRead);",
											" pm.expect(messageRead).to.equal(true);",
											"})",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation readMessage($chatId: ID!, $messageIds: [Int!]!) {\n    chat(chatId: $chatId) {\n        messagesRead(messageIds: $messageIds)\n    }\n}",
										"variables": "{\n\t\"chatId\": \"{{chat_id}}\",\n\t\"messageIds\": [\"{{msgId}}\"]\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Marks message as read by user\n\n__@params__  </br>\nchatId - the id of the chat the message belongs to </br>\nmessageIds - an array of ids of the messages we want to mark as read </br>"
							},
							"response": []
						},
						{
							"name": "Reply to Message",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//let chatId = pm.environment.get(\"chatId\");",
											"// let MessageID = pm.environment.get(\"SendMessageId\");",
											"// pm.collectionVariables.set(\"repliedToId\", MessageID);",
											"// console.log(\"Message Id is :\"+MessageID)",
											"pm.collectionVariables.set(\"replyMessage\", \"Automation- Test reply message from postman\");",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.chat.sendMessage;",
											"let repliedMessage = pm.collectionVariables.get(\"replyMessage\");",
											"let repliedToId = pm.collectionVariables.get(\"msgId\");",
											"let username = pm.collectionVariables.get(\"username\");",
											"var senderId = pm.collectionVariables.get(\"user_id\");",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"console.log(response.sender);",
											"if (pm.response.code === 200) ",
											"{",
											"pm.test(\"Verify base_structure of sendMessage\", function () ",
											"       {",
											"",
											"    pm.expect(response).to.includes.keys('id', 'image','attachment','message','repliedTo', 'forwardOf','type','sender');",
											"});",
											"tests[\"Verify that there should be a valid sendMessage Id\"] = response.id !== null || response.id !== undefined || response.id !== \"\";",
											"tests[\"Verify that replied message content should be same\"] = response.message === repliedMessage;",
											"tests[\"Verify that repliedTo Id should be same\"] = response.repliedTo.id === repliedToId;",
											"tests[\"Verify that senderId should be same\"] = response.sender.id === senderId;",
											"tests[\"Verify that sender username should be same\"] = response.sender.username === username;",
											"}",
											"",
											"",
											" pm.collectionVariables.set(\"replyMsgId\", response.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation sendMessage($chatId: ID!, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean, $repliedTo: Int) {\n    chat(chatId: $chatId) {\n        sendMessage(message: $message, type: $type, fileId: $fileId, priority: $priority, repliedTo: $repliedTo) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            repliedTo {\n                id\n            }\n            forwardOf {\n                id\n            }\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
										"variables": "{\n\t\"chatId\": \"{{chat_id}}\",\n\t\"message\": \"{{replyMessage}}\",\n\t\"type\": \"text\",\n\t\"priority\": false,\n\t\"repliedTo\": {{msgId}}\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Messages after reply",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.chat.messages;",
											"let replyMsgId= pm.collectionVariables.get(\"replyMsgId\");",
											"console.log(\"Message ID is++++ \"+replyMsgId)",
											"let Message = pm.collectionVariables.get(\"replyMessage\");",
											"let username = pm.collectionVariables.get(\"username\");",
											"var senderId = pm.collectionVariables.get(\"user_id\");",
											"",
											"console.log(\"Message is \"+Message)",
											"if (pm.response.code === 200) ",
											"{",
											"pm.test(\"Fetch total number of messages\", function(){",
											"    let messages = jsonBody.data.chat.messages.messages.length;",
											"    console.log(\"Total number of messages are:\", messages)",
											"});",
											" ",
											"",
											"    for(let i=0;i<response.messages.length;i++){",
											"     console.log(response.messages[i].message);",
											"",
											"pm.test(\"Verify base_structure of message: \"+response.messages[i].id, function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat.messages.messages[i]).to.includes.keys('id', 'priority','message','image','type', 'template','attachment','dateCreated','sender','deliveredTo','readBy','repliedTo','data');",
											"});",
											"",
											"tests[\"Verify that the dateCreated should not be empty or null (having messageId: \" +response.messages[i].id+\")\"] = response.messages[i].dateCreated !== null || response.messages[i].dateCreated !== undefined || response.messages[i].dateCreated !== \"\";",
											"",
											"",
											"pm.test(\"Verify the base structure of last deliveredTo: \"+response.messages[i].deliveredTo[0].messageId , function () ",
											"       {",
											"",
											"    pm.expect(response.messages[i].deliveredTo[0]).to.includes.keys('messageId', 'user','timestamp');",
											"});",
											"",
											"pm.test(\"Verify the base structure of last readBy: \"+response.messages[i].readBy[0].messageId, function () ",
											"       {",
											"",
											"    pm.expect(response.messages[i].readBy[0]).to.includes.keys('messageId', 'user','timestamp');",
											"});",
											"    }",
											"    ",
											"tests[\"Verify that the recently sent message Id should be same\"] = response.messages[0].id ===replyMsgId;",
											"tests[\"Verify that the recently sent message should be same\"] = response.messages[0].message ===Message;",
											"tests[\"Verify that the last sent message type should be text\"] = response.messages[0].type ===\"text\";",
											"tests[\"Verify that the username of last sent message should be same\"] = response.messages[0].sender.username === username;",
											"tests[\"Verify that the senderId of last sent message should be same\"] = response.messages[0].sender.id === senderId;",
											"tests[\"Verify that the recently deliveredTo message Id should be same\"] = response.messages[0].deliveredTo[0].messageId ===replyMsgId;",
											"",
											"",
											"pm.test(\"Verify the base structure of last sender\", function () ",
											"       {",
											"",
											"    pm.expect(response.messages[0].sender).to.includes.keys('id', 'firstname','lastname','username','email', 'phonenumber','role','profilePic','workStatus','statusDescription','workStatusProxy');",
											"});",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query fetchMessages ($chatId: ID!, $continuationId: Int, $limit: Int, $direction: PaginationDirection) {\n    chat(chatId: $chatId) {\n        messages(continuationId: $continuationId, limit: $limit, direction: $direction) {\n            messages {\n                ...messageFields\n            }\n        }\n    }\n}\n\nfragment messageFields on Message {\n    id\n    priority\n    message\n    image\n    type\n    template {\n        id\n        formTitle\n        requestTitle\n    }\n    attachment {\n        ...AttachmentFragment\n    }\n    dateCreated\n    sender {\n        ...publicUserFields\n    }\n    deliveredTo {\n        ...deliveryReceiptFields\n    }\n    readBy {\n        ...readReceiptFields\n    }\n    repliedTo {\n        id\n    }\n    data {\n        __typename ... on ConsultMessageData {\n            mrn\n            firstname\n            lastname\n            details\n        }\n    }\n}\n\nfragment readReceiptFields on ReadReceipt {\n    messageId\n    user {\n        ...publicUserFields\n    }\n    timestamp\n}\n\nfragment deliveryReceiptFields on DeliveryReceipt {\n    messageId\n    user {\n        ...publicUserFields\n    }\n    timestamp\n}\n\nfragment publicUserFields on PublicUser {\n    id\n    firstname\n    lastname\n    username\n    email\n    phonenumber\n    role\n    profilePic {\n        url\n    }\n    workStatus\n    statusDescription\n    workStatusProxy {\n        ...publicUserStatusFields\n    }\n}\n\nfragment publicUserStatusFields on PublicUser {\n    id\n    firstname\n    lastname\n    username\n    phonenumber\n    role\n    profilePic {\n        url\n    }\n}\n\nfragment AttachmentFragment on File {\n    id\n    url\n    mimeType\n    fileName\n    blob\n}\n",
										"variables": "{\n\t\"chatId\": \"{{chat_id}}\",\n\t\"direction\": \"previous\",\n    \"limit\": 5\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Fetch paginated messages for chat referenced by given id. </br>\n__Note__: This endpoint only paginates upwards.\n\n__@params__  </br>\nchatId - the id referencing the chat to fetch messages for </br>\ncontinuationId - the id of the message to start paginating from </br>\nlimit - the number of messages to load </br>\n\n__@return__ a list of messages"
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Archived Chat Test",
					"item": [
						{
							"name": "Fetch Access Token to create a chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"role\", jsonData.response.user.role);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username1}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password1}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Fetch receiver User's Id to create a chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"api_bearer\", jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"receiver_token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"Second_username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"Second_firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"Second_lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"Second_user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"Second_role\", jsonData.response.user.role);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username2}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password2}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Create Chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"[INFO] Request: \" + JSON.stringify(request)] = true;",
											"tests[\"[INFO] Response: \" + responseBody] = true;",
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.createChat;",
											"",
											"pm.collectionVariables.set(\"chat_id\", response.id);",
											"  pm.test(\"Verify base_structure of createChat \", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.createChat).to.includes.keys('id', 'title','members','lastMessage','lastUnreadMessage', 'unreadPriorityMessages');",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createChat($memberIds: [ID!]!, $title: String) {\n    createChat(members: $memberIds, title: $title) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n\nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}",
										"variables": "{\n\t\"memberIds\": [\"{{Second_user_id}}\"]\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Create a new chat. If chat matching similar pattern already exists then returns existing chat.\n\n__@params__  </br>\nmemberIds - an array of ids of the users we want in the chat </br>\ntitle - the initial title of the chat </br>\n\n__@return__ chat object with the specified params"
							},
							"response": [
								{
									"name": "Cant Start Chat with Shell Account",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createChat($memberIds: [ID!]!, $title: String) {\n    createChat(members: $memberIds, title: $title) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n\nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}",
												"variables": "{\n\t\"memberIds\": [\"37a5834d-df8e-4740-939d-62cc3bd99ba2\"]\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 23 Mar 2022 16:10:43 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "221"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"Can't start chat with shell account\",\n            \"name\": \"InvalidOperationShellAccount\",\n            \"code\": \"InvalidOperationShellAccount\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								}
							]
						},
						{
							"name": "Archived Chat",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let chatId = pm.collectionVariables.get(\"chat_id\");",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"if (pm.response.code === 200) ",
											"{",
											"    tests[\"Verify that the chatId should be same\"] = jsonBody.data.chat.archive.id === chatId ;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "\n\nmutation ArchiveChat($chatId: ID!) \n{\n    chat(chatId: $chatId) \n    {   archive {id}}}\n",
										"variables": "{\n    \"chatId\": \"{{chat_id}}\"\n   \n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Changes the title of the chat.\n\n__@params__  </br>\nchatId - the id of the chat we want to change the title of </br>\ntitle - title of the chat we want to change it to </br>\n\n\n__@return__ chat object with the updated title"
							},
							"response": []
						},
						{
							"name": "Fetch Archived Chats",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let chatId = pm.collectionVariables.get(\"chat_id\");",
											"let response = jsonBody.data.archivedChats;",
											"let username = pm.collectionVariables.get(\"username\");",
											"var senderId = pm.collectionVariables.get(\"user_id\");",
											"",
											"let MessageID= pm.collectionVariables.get(\"replyMsgId\");",
											"console.log(\"Message ID is \"+MessageID);",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"if (pm.response.code === 200) ",
											"{",
											"  ",
											"pm.test(\"Verify base_structure of archived chat: \"+response.chats[0].muted, function () ",
											"       {",
											"",
											"    pm.expect(response.chats[0]).to.includes.keys('id', 'title','type','lastMessage','muted', 'dateCreated','isArchived');",
											"});",
											"",
											"tests[\"Verify that the chatId should be same\"] = response.chats[0].id === chatId ;",
											"// tests[\"Verify that the last sent message Id should be same\"] = response.chats[0].lastMessage.id ===MessageID;",
											"tests[\"Verify that the last sent message type should be text\"] = response.chats[0].lastMessage.type ===\"text\";",
											"tests[\"Verify that the dateCreated should not be empty or null\"] = response.chats[0].lastMessage.dateCreated !== null || responsechats[0].lastMessage.dateCreated !== undefined || responsechats[0].lastMessage.dateCreated !== \"\";",
											"tests[\"Verify that the username of last sent message should be same\"] = response.chats[0].lastMessage.sender.username === username;",
											"tests[\"Verify that the senderId of last sent message should be same\"] = response.chats[0].lastMessage.sender.id === senderId;",
											"// tests[\"Verify that the readBy message Id should be same\"] = response.chats[0].lastMessage.readBy[0].messageId ===MessageID;",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"type": "text",
										"value": "{{scopetoken}}"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query organizationChats($continuationId: ID, $limit: Int, $priority: MessagePriority) {\n  archivedChats(continuationId: $continuationId, limit: $limit, priority: $priority) {\n    chats {\n      ...basicChatFields\n    }\n  }\n}\n\nfragment basicChatFields on Chat {\n  id\n  title\n  type\n  lastMessage {\n    ...messageFields\n  }\n  muted\n  dateCreated\n  isArchived\n}\n\nfragment messageFields on Message {\n  id\n  priorityType\n  message\n  image\n#   attachment {\n#     url\n#     mimeType\n#     fileName\n#   }\n  type\n  dateCreated\n  sender {\n    ...publicUserFields\n  }\n  readBy {\n    ...readReceiptFields\n  }\n  data {\n    __typename\n    ... on ConsultMessageData {\n      mrn\n      firstname\n      lastname\n      details\n    }\n  }\n}\n\nfragment readReceiptFields on ReadReceipt {\n  messageId\n  user {\n    ...publicUserFields\n  }\n  timestamp\n}\n\nfragment publicUserFields on PublicUser {\n  id\n  firstname\n  lastname\n  username\n  role\n  profilePic {\n    url\n  }\n  workStatus\n  statusDescription\n  workStatusProxy {\n    ...publicUserStatusFields\n  }\n}\n\nfragment publicUserStatusFields on PublicUser {\n  id\n  firstname\n  lastname\n  username\n  role\n  profilePic {\n    url\n  }\n}\n\n",
										"variables": "{\n    \"isPriority\": false,\n    \"limit\": 12\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Fetch paginated chats by specifying start point and limit.\n\n__@params__ </br> \ncontinuationId - the id of the chat we start paginating from </br>\nlimit - number of messages to load </br>\nisPriority - flag to load priority/non-priority chats </br>\n\n__@return__ list of chats"
							},
							"response": []
						},
						{
							"name": "Unarchived Chat",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// let chatId = pm.environment.get(\"chatId\");",
											"// console.log(\"ChatId: \"+chatId)",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let chatId = pm.collectionVariables.get(\"chat_id\");",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"if (pm.response.code === 200) ",
											"{",
											"    tests[\"Verify that the chatId should be same\"] = jsonBody.data.chat.unarchive.id === chatId ;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "\nmutation UnarchiveChat($chatId: ID!) {\n    chat(chatId: $chatId) \n    {\n        unarchive {\n        id   \n        }  }\n        }\n",
										"variables": "{\n    \"chatId\": \"{{chat_id}}\"\n   \n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Changes the title of the chat.\n\n__@params__  </br>\nchatId - the id of the chat we want to change the title of </br>\ntitle - title of the chat we want to change it to </br>\n\n\n__@return__ chat object with the updated title"
							},
							"response": []
						},
						{
							"name": "Fetch Chat after unarchived chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" let jsonBody = pm.response.json();",
											" let chatId = pm.collectionVariables.get(\"chat_id\");",
											" var senderId = pm.collectionVariables.get(\"user_id\");",
											" var receiverId = pm.collectionVariables.get(\"Second_user_id\");",
											" var senderusername = pm.environment.get(\"username1\");",
											" var receiverUsername = pm.environment.get(\"username2\");",
											"let MessageID= pm.collectionVariables.get(\"replyMsgId\");",
											"console.log(\"Message ID is \"+MessageID)",
											"let Message = pm.collectionVariables.get(\"replyMessage\");",
											" let Ids = [receiverId,senderId];",
											" let usernames = [receiverUsername,senderusername];",
											" console.log(\"Ids are: \"+Ids);",
											" let username = pm.collectionVariables.get(\"username\");",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify base_structure of chat\", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat).to.includes.keys('id', 'title','type','muted','image', 'members','lastMessage','lastUnreadMessage','unreadPriorityMessages');",
											"});",
											"tests[\"Verify that the chatId should be same\"] = jsonBody.data.chat.id === chatId;",
											"",
											"if(Ids[0] === jsonBody.data.chat.members[0].id) {",
											"    testMembers(1,1);",
											"    testMembers(0,0);",
											"} else if (Ids[0] === jsonBody.data.chat.members[1].id) {",
											"    testMembers(1,0);",
											"    testMembers(0,1);",
											"}",
											"",
											"function testMembers(idsIndx, index) {",
											"    pm.test(\"Verify base_structure of members\", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat.members[idsIndx]).to.includes.keys('id', 'firstname','lastname','username','addresses');",
											"    });",
											"",
											"    tests[\"Verify that sender and receiverId should be same:\"+ Ids[idsIndx]] = jsonBody.data.chat.members[index].id === Ids[idsIndx];",
											"",
											"    tests[\"Verify that sender and receiver usernames should be same:\"+ usernames[idsIndx]] = jsonBody.data.chat.members[index].username === usernames[idsIndx];",
											"}",
											"",
											"pm.test(\"Verify base_structure of last message\", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat.lastMessage).to.includes.keys('id', 'type','message','sender','dateCreated');",
											"});",
											"",
											"// tests[\"Verify that the last message Id should be same\"] = jsonBody.data.chat.lastMessage.id === MessageID;",
											"tests[\"Verify that the last message type should be text\"] = jsonBody.data.chat.lastMessage.type === \"text\";",
											"tests[\"Verify that the username of last message should be same\"] = jsonBody.data.chat.lastMessage.sender.username === username;",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query fetchChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    type\n    muted\n    image {\n        ...AttachmentFragment\n    }\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n \n \nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n    addresses {\n        id\n        address\n        type\n        access\n        ordinal\n    }\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n}",
										"variables": "{\n\t\"chatId\": \"{{chat_id}}\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Fetch chat referenced by given id.\n\n__@params__ chatId - id of the chat </br>\n__@return__ chat object with specified id"
							},
							"response": [
								{
									"name": "Fetch Chat - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fetchChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    image {\n        ...AttachmentFragment\n    }\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n \n \nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n    addresses {\n        id\n        address\n        type\n        access\n        ordinal\n    }\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n}",
												"variables": "{\n\t\"chatId\": \"9b98216c-76af-4402-bcc4-1d8415234485\"\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 09 Oct 2020 16:21:21 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4393"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"chat\": {\n            \"id\": \"9b98216c-76af-4402-bcc4-1d8415234485\",\n            \"title\": null,\n            \"image\": null,\n            \"members\": [\n                {\n                    \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n                    \"username\": \"umarazhar\",\n                    \"firstname\": \"Umar\",\n                    \"lastname\": \"Azhar\",\n                    \"addresses\": [\n                        {\n                            \"id\": \"dW1hckBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hciszQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+3@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcis1QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+5@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcis2Mjg4MkBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+62882@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitmZWhpdXI1NzJAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+fehiur572@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitoaWVqNjgzOEBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+hiej6838@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitqbDJramxrZnM1YXNAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+jl2kjlkfs5as@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitqbDJramxrZnM1YXNhQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+jl2kjlkfs5asa@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitsa2Fqc2RsMjM0MkBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+lkajsdl2342@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmcyQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org2@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmczQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org3@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmc0QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org4@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmc1QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org5@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcit0ZXNsa2FqZmRAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+teslkajfd@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"d15a26df-483c-4baf-8606-d7dee3076859\",\n                    \"username\": \"chilli12\",\n                    \"firstname\": \"Chinni12\",\n                    \"lastname\": \"chilli\",\n                    \"addresses\": []\n                }\n            ],\n            \"lastMessage\": {\n                \"id\": 146701,\n                \"type\": \"text\",\n                \"message\": \"Test\",\n                \"sender\": {\n                    \"id\": \"d15a26df-483c-4baf-8606-d7dee3076859\",\n                    \"username\": \"chilli12\",\n                    \"firstname\": \"Chinni12\",\n                    \"lastname\": \"chilli\",\n                    \"addresses\": []\n                },\n                \"dateCreated\": \"2019-12-18T17:06:49.942Z\"\n            },\n            \"lastUnreadMessage\": null,\n            \"unreadPriorityMessages\": []\n        }\n    }\n}"
								}
							]
						}
					]
				},
				{
					"name": "Group Chat Send Message Test",
					"item": [
						{
							"name": "Fetch Access Token to create a chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"api_bearer\", jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"role\", jsonData.response.user.role);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username1}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password1}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Fetch user's Id of User 1 to create a group chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"GroupMember-api_bearer\",\"Bearer \" + jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"GroupMember-refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"GroupMember-username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"GroupMember-firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"GroupMember-lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"GroupMember-user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"GroupMember-role\", jsonData.response.user.role);",
											"",
											"let user_id =pm.collectionVariables.get(\"GroupMember-user_id\");",
											"console.log(\"GroupMember-user_id: \"+user_id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username2}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password2}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Fetch user's Id of User 2 to create a group chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"Second_api_bearer\", jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"Second_refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"Second_username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"Second_firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"Second_lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"Second_user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"Second_role\", jsonData.response.user.role);",
											"",
											"let user_id =pm.collectionVariables.get(\"Second_user_id\");",
											"console.log(\"Second_user_id: \"+user_id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username3}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password3}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Create group chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.createChat;",
											"let GroupMember_username= pm.collectionVariables.get(\"GroupMember-username\");",
											"let GroupMember_firstname= pm.collectionVariables.get(\"GroupMember-firstname\");",
											"let GroupMember_lastname= pm.collectionVariables.get(\"GroupMember-lastname\");",
											"let GroupMember_user_id= pm.collectionVariables.get(\"GroupMember-user_id\");",
											"let member2Id = pm.collectionVariables.get(\"Second_user_id\");",
											"let member2Firstname = pm.collectionVariables.get(\"Second_firstname\");",
											"let member2Lastname = pm.collectionVariables.get(\"Second_lastname\");",
											"let member2Username = pm.collectionVariables.get(\"Second_username\");",
											"",
											"let userId = pm.collectionVariables.get(\"user_id\");",
											"let UserName = pm.collectionVariables.get(\"username\");",
											"let UserFirstName = pm.collectionVariables.get(\"firstname\");",
											"let UserLastName = pm.collectionVariables.get(\"lastname\");",
											"console.log(\"UserLastName: \" +UserLastName);",
											"let Ids = [member2Id,userId,GroupMember_user_id];",
											"let firstnames = [member2Firstname,UserFirstName,GroupMember_firstname];",
											"let lastnames = [member2Lastname,UserLastName,GroupMember_lastname];",
											"let usernames = [member2Username,UserName,GroupMember_username];",
											"pm.collectionVariables.set(\"chat_id\", response.id);",
											"console.log(\"member2Id: \" +member2Id);",
											"console.log(\"GroupMember_user_id: \" +GroupMember_user_id);",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code === 200) ",
											"{ ",
											"  for(var i =0 ; i < response.members.length ;i++)",
											"  {",
											"    pm.test(\"Verify base_structure of members\", function () ",
											"        {",
											"",
											"        pm.expect(response.members[i]).to.includes.keys('id', 'username','firstname','lastname');",
											"    });",
											"",
											"    for(var j = 0; j < Ids.length; j++) {",
											"        if(response.members[i].id === Ids[j]) {",
											"            tests[\"Verify that the userId should be same: \"+response.members[i].id] = response.members[i].id === Ids[j];",
											"",
											"            tests[\"Verify that the username should be same: \"+response.members[i].username] = response.members[i].username === usernames[j];",
											"",
											"            tests[\"Verify that the firstname should be same: \"+response.members[i].firstname] = response.members[i].firstname === firstnames[j];",
											"",
											"            tests[\"Verify that the lastname should be same: \"+response.members[i].lastname] = response.members[i].lastname === lastnames[j];",
											"        }",
											"    }",
											"}",
											"",
											"}",
											"pm.collectionVariables.set(\"groupChatID\", jsonBody.data.createChat.id);",
											"    let groupChatID= pm.collectionVariables.get(\"groupChatID\");",
											"console.log(\"groupChatID: \"+groupChatID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createChat($memberIds: [ID!]!, $title: String) {\n    createChat(members: $memberIds, title: $title) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n\nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}",
										"variables": "{\n\t\"memberIds\": [\"{{Second_user_id}}\" , \"{{GroupMember-user_id}}\"]\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Create a new chat. If chat matching similar pattern already exists then returns existing chat.\n\n__@params__  </br>\nmemberIds - an array of ids of the users we want in the chat </br>\ntitle - the initial title of the chat </br>\n\n__@return__ chat object with the specified params"
							},
							"response": [
								{
									"name": "Cant Start Chat with Shell Account",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createChat($memberIds: [ID!]!, $title: String) {\n    createChat(members: $memberIds, title: $title) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n\nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}",
												"variables": "{\n\t\"memberIds\": [\"37a5834d-df8e-4740-939d-62cc3bd99ba2\"]\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 23 Mar 2022 16:10:43 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "221"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"Can't start chat with shell account\",\n            \"name\": \"InvalidOperationShellAccount\",\n            \"code\": \"InvalidOperationShellAccount\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								}
							]
						},
						{
							"name": "Fetch Group Chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" let jsonBody = pm.response.json();",
											" let chatId = pm.collectionVariables.get(\"groupChatID\");",
											" let GroupMember_username= pm.collectionVariables.get(\"GroupMember-username\");",
											"let GroupMember_firstname= pm.collectionVariables.get(\"GroupMember-firstname\");",
											"let GroupMember_lastname= pm.collectionVariables.get(\"GroupMember-lastname\");",
											"let GroupMember_user_id= pm.collectionVariables.get(\"GroupMember-user_id\");",
											"let member2Id = pm.collectionVariables.get(\"Second_user_id\");",
											"let member2Firstname = pm.collectionVariables.get(\"Second_firstname\");",
											"let member2Lastname = pm.collectionVariables.get(\"Second_lastname\");",
											"let member2Username = pm.collectionVariables.get(\"Second_username\");",
											"let userId = pm.collectionVariables.get(\"user_id\");",
											"let UserName = pm.collectionVariables.get(\"username\");",
											"let UserFirstName = pm.collectionVariables.get(\"firstname\");",
											"let UserLastName = pm.collectionVariables.get(\"lastname\");",
											"console.log(\"UserLastName: \" +UserLastName);",
											"let Ids = [member2Id,userId,GroupMember_user_id];",
											"let firstnames = [member2Firstname,UserFirstName,GroupMember_firstname];",
											"let lastnames = [member2Lastname,UserLastName,GroupMember_lastname];",
											"let usernames = [member2Username,UserName,GroupMember_username];",
											"  console.log(\"username: \"+usernames[1]);",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"if (pm.response.code === 200) ",
											"{ ",
											"pm.test(\"Verify base_structure of chat\", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat).to.includes.keys('id', 'title','type','muted','image', 'members','lastMessage','lastUnreadMessage','unreadPriorityMessages');",
											"});",
											"tests[\"Verify that the chatId should be same\"] = jsonBody.data.chat.id === chatId;",
											"tests[\"Verify that the chat type should be grup\"] = jsonBody.data.chat.type=== \"group\";",
											"",
											"for(var i =0 ; i < jsonBody.data.chat.members.length ;i++)",
											"{",
											"    pm.test(\"Verify base_structure of members\", function () ",
											"        {",
											"",
											"        pm.expect(jsonBody.data.chat.members[i]).to.includes.keys('id', 'firstname','lastname','username','addresses');",
											"    });",
											"",
											"    for(var j = 0; j < Ids.length; j++) {",
											"        if(jsonBody.data.chat.members[i].id === Ids[j]){",
											"",
											"            tests[\"Verify that member's Ids should be same:\"+ Ids[j]] = jsonBody.data.chat.members[i].id === Ids[j];",
											"            tests[\"Verify that member's usernames should be same:\"+ usernames[j]] = jsonBody.data.chat.members[i].username === usernames[j];",
											"            tests[\"Verify that member's lastnames should be same:\"+ lastnames[j]] = jsonBody.data.chat.members[i].lastname === lastnames[j];",
											"            tests[\"Verify that member's firstnames should be same:\"+ firstnames[j]] = jsonBody.data.chat.members[i].firstname === firstnames[j];",
											"        }",
											"    }",
											"",
											"}",
											"",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//   let groupChatID= pm.environment.get(\"groupChatID\");",
											"// console.log(\"groupChatID: \"+groupChatID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query fetchChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    type\n    muted\n    image {\n        ...AttachmentFragment\n    }\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n \n \nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n    addresses {\n        id\n        address\n        type\n        access\n        ordinal\n    }\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n}",
										"variables": "{\n\t\"chatId\": \"{{groupChatID}}\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Fetch chat referenced by given id.\n\n__@params__ chatId - id of the chat </br>\n__@return__ chat object with specified id"
							},
							"response": [
								{
									"name": "Fetch Chat - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fetchChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    image {\n        ...AttachmentFragment\n    }\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n \n \nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n    addresses {\n        id\n        address\n        type\n        access\n        ordinal\n    }\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n}",
												"variables": "{\n\t\"chatId\": \"9b98216c-76af-4402-bcc4-1d8415234485\"\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 09 Oct 2020 16:21:21 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4393"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"chat\": {\n            \"id\": \"9b98216c-76af-4402-bcc4-1d8415234485\",\n            \"title\": null,\n            \"image\": null,\n            \"members\": [\n                {\n                    \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n                    \"username\": \"umarazhar\",\n                    \"firstname\": \"Umar\",\n                    \"lastname\": \"Azhar\",\n                    \"addresses\": [\n                        {\n                            \"id\": \"dW1hckBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hciszQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+3@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcis1QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+5@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcis2Mjg4MkBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+62882@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitmZWhpdXI1NzJAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+fehiur572@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitoaWVqNjgzOEBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+hiej6838@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitqbDJramxrZnM1YXNAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+jl2kjlkfs5as@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitqbDJramxrZnM1YXNhQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+jl2kjlkfs5asa@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitsa2Fqc2RsMjM0MkBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+lkajsdl2342@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmcyQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org2@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmczQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org3@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmc0QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org4@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmc1QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org5@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcit0ZXNsa2FqZmRAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+teslkajfd@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"d15a26df-483c-4baf-8606-d7dee3076859\",\n                    \"username\": \"chilli12\",\n                    \"firstname\": \"Chinni12\",\n                    \"lastname\": \"chilli\",\n                    \"addresses\": []\n                }\n            ],\n            \"lastMessage\": {\n                \"id\": 146701,\n                \"type\": \"text\",\n                \"message\": \"Test\",\n                \"sender\": {\n                    \"id\": \"d15a26df-483c-4baf-8606-d7dee3076859\",\n                    \"username\": \"chilli12\",\n                    \"firstname\": \"Chinni12\",\n                    \"lastname\": \"chilli\",\n                    \"addresses\": []\n                },\n                \"dateCreated\": \"2019-12-18T17:06:49.942Z\"\n            },\n            \"lastUnreadMessage\": null,\n            \"unreadPriorityMessages\": []\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Send Message in Group Chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.chat.sendMessage;",
											"let Message = pm.collectionVariables.get(\"Message\");",
											"let senderId= pm.collectionVariables.get(\"user_id\");",
											"let senderUsername =pm.collectionVariables.get(\"username\");",
											"console.log(\"senderId: \"+senderId);",
											"console.log(\"senderUsername: \"+senderUsername);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify base_structure of chat\", function () ",
											"       {",
											"",
											"    pm.expect(response).to.includes.keys('id', 'image','attachment','message','type', 'sender');",
											"});",
											"",
											"tests[\"Verify that there should be a valid sendMessage Id\"] = response.id !== null || response.id !== undefined ;",
											"tests[\"Verify that the message should be same\"] = response.message ===Message;",
											"tests[\"Verify that the message type should be text\"] = response.type ===\"text\";",
											"tests[\"Verify that the senderId should be same\"] = response.sender.id ===senderId;",
											"tests[\"Verify that the sender's username should be same\"] = response.sender.username ===senderUsername;",
											"",
											"pm.collectionVariables.set(\"SendMessageId\", response.id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// let chatId = pm.environment.get(\"Chat_Id\");",
											"",
											"pm.collectionVariables.set(\"Message\", \"BE Automation testing\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"type": "text",
										"value": "{{scopetoken}}"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
										"variables": "{\n\t\"chatId\": \"{{groupChatID}}\",\n\t\"message\": \"{{Message}}\",\n\t\"priority\": false\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Send message to specified chat\n\n__@params__  </br>\nchatId - the id of the chat we are sending the message to </br>\nmessage - the message we are sending </br>\n__@optional__ fileId - an id referencing the uploaded file on our S3 bucket (e.g. for file/picture messages). See __'Upload Files'__ </br>\ntype - the type of message we are sending (e.g. image, text, attachment) </br>\npriority - states whether or not the message is of high priority </br>\n\n__@return__ message object with specified parameters"
							},
							"response": [
								{
									"name": "User Not Member of Chat",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "196"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:14:24 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"User is not a member of chat\",\n            \"name\": \"UserNotMemberOfChat\",\n            \"code\": \"UserNotMemberOfChat\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								},
								{
									"name": "Access Token Expired",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "ETag",
											"value": "W/\"7e-GtRgWhqN7iKqYzLxAnMatoGWiNs\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:14:54 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidAccessToken\",\n    \"code\": \"InvalidAccessToken\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid token: access token has expired\"\n}"
								},
								{
									"name": "Invalid Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "125"
										},
										{
											"key": "ETag",
											"value": "W/\"7d-X5Hlvs/k/IQ8lqjZMIqbDZW5bJc\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:15:29 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidAccessToken\",\n    \"code\": \"InvalidAccessToken\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid token: access token is invalid\"\n}"
								},
								{
									"name": "Unauthorized Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "134"
										},
										{
											"key": "ETag",
											"value": "W/\"86-XDfIF2OBPyJh78GyxeEU0/dYOYY\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:15:43 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"UnauthorizedRequest\",\n    \"code\": \"UnauthorizedRequest\",\n    \"statusCode\": 401,\n    \"message\": \"Unauthorized request: no authentication given\"\n}"
								}
							]
						},
						{
							"name": "Fetch Messages in Group chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.chat.messages;",
											"let MessageID = pm.collectionVariables.get(\"SendMessageId\");",
											"console.log(\"Message ID is \"+MessageID)",
											"let Message = pm.collectionVariables.get(\"Message\");",
											"let username = pm.collectionVariables.get(\"username\");",
											"var senderId = pm.collectionVariables.get(\"user_id\");",
											"",
											"console.log(\"Message is \"+Message)",
											"if (pm.response.code === 200) ",
											"{",
											"pm.test(\"Fetch total number of messages\", function(){",
											"    let messages = jsonBody.data.chat.messages.messages.length;",
											"    console.log(\"Total number of messages are:\", messages)",
											"});",
											" ",
											"",
											"    for(let i=0;i<response.messages.length;i++){",
											"     console.log(response.messages[i].message);",
											"",
											"pm.test(\"Verify base_structure of message: \"+response.messages[i].id, function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat.messages.messages[i]).to.includes.keys('id', 'priority','message','image','type', 'template','attachment','dateCreated','sender','deliveredTo','readBy','repliedTo','data');",
											"});",
											"",
											"tests[\"Verify that the dateCreated should not be empty or null (having messageId: \" +response.messages[i].id+\")\"] = response.messages[i].dateCreated !== null || response.messages[i].dateCreated !== undefined || response.messages[i].dateCreated !== \"\";",
											"",
											"",
											"pm.test(\"Verify the base structure of last deliveredTo: \"+response.messages[i].deliveredTo[0].messageId , function () ",
											"       {",
											"",
											"    pm.expect(response.messages[i].deliveredTo[0]).to.includes.keys('messageId', 'user','timestamp');",
											"});",
											"",
											"pm.test(\"Verify the base structure of last readBy: \"+response.messages[i].readBy[0].messageId, function () ",
											"       {",
											"",
											"    pm.expect(response.messages[i].readBy[0]).to.includes.keys('messageId', 'user','timestamp');",
											"});",
											"    }",
											"    ",
											"tests[\"Verify that the recently sent message Id should be same\"] = response.messages[0].id ===MessageID;",
											"tests[\"Verify that the recently sent message should be same\"] = response.messages[0].message ===Message;",
											"tests[\"Verify that the last sent message type should be text\"] = response.messages[0].type ===\"text\";",
											"tests[\"Verify that the username of last sent message should be same\"] = response.messages[0].sender.username === username;",
											"tests[\"Verify that the senderId of last sent message should be same\"] = response.messages[0].sender.id === senderId;",
											"tests[\"Verify that the recently deliveredTo message Id should be same\"] = response.messages[0].deliveredTo[0].messageId ===MessageID;",
											"",
											"",
											"pm.test(\"Verify the base structure of last sender\", function () ",
											"       {",
											"",
											"    pm.expect(response.messages[0].sender).to.includes.keys('id', 'firstname','lastname','username','email', 'phonenumber','role','profilePic','workStatus','statusDescription','workStatusProxy');",
											"});",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query fetchMessages ($chatId: ID!, $continuationId: Int, $limit: Int, $direction: PaginationDirection) {\n    chat(chatId: $chatId) {\n        messages(continuationId: $continuationId, limit: $limit, direction: $direction) {\n            messages {\n                ...messageFields\n            }\n        }\n    }\n}\n\nfragment messageFields on Message {\n    id\n    priority\n    message\n    image\n    type\n    template {\n        id\n        formTitle\n        requestTitle\n    }\n    attachment {\n        ...AttachmentFragment\n    }\n    dateCreated\n    sender {\n        ...publicUserFields\n    }\n    deliveredTo {\n        ...deliveryReceiptFields\n    }\n    readBy {\n        ...readReceiptFields\n    }\n    repliedTo {\n        id\n    }\n    data {\n        __typename ... on ConsultMessageData {\n            mrn\n            firstname\n            lastname\n            details\n        }\n    }\n}\n\nfragment readReceiptFields on ReadReceipt {\n    messageId\n    user {\n        ...publicUserFields\n    }\n    timestamp\n}\n\nfragment deliveryReceiptFields on DeliveryReceipt {\n    messageId\n    user {\n        ...publicUserFields\n    }\n    timestamp\n}\n\nfragment publicUserFields on PublicUser {\n    id\n    firstname\n    lastname\n    username\n    email\n    phonenumber\n    role\n    profilePic {\n        url\n    }\n    workStatus\n    statusDescription\n    workStatusProxy {\n        ...publicUserStatusFields\n    }\n}\n\nfragment publicUserStatusFields on PublicUser {\n    id\n    firstname\n    lastname\n    username\n    phonenumber\n    role\n    profilePic {\n        url\n    }\n}\n\nfragment AttachmentFragment on File {\n    id\n    url\n    mimeType\n    fileName\n    blob\n}\n",
										"variables": "{\n\t\"chatId\": \"{{groupChatID}}\",\n\t\"direction\": \"previous\",\n    \"limit\": 5\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Fetch paginated messages for chat referenced by given id. </br>\n__Note__: This endpoint only paginates upwards.\n\n__@params__  </br>\nchatId - the id referencing the chat to fetch messages for </br>\ncontinuationId - the id of the message to start paginating from </br>\nlimit - the number of messages to load </br>\n\n__@return__ a list of messages"
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Change Chat Name Test",
					"item": [
						{
							"name": "Fetch Access Token to create a chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"role\", jsonData.response.user.role);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username1}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password1}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Create Chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.createChat;",
											"",
											"pm.collectionVariables.set(\"chat_id\", response.id);",
											"  pm.test(\"Verify base_structure of createChat \", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.createChat).to.includes.keys('id', 'title','members','lastMessage','lastUnreadMessage', 'unreadPriorityMessages');",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createChat($memberIds: [ID!]!, $title: String) {\n    createChat(members: $memberIds, title: $title) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n\nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}",
										"variables": "{\n\t\"memberIds\": [\"{{Second_user_id}}\"]\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Create a new chat. If chat matching similar pattern already exists then returns existing chat.\n\n__@params__  </br>\nmemberIds - an array of ids of the users we want in the chat </br>\ntitle - the initial title of the chat </br>\n\n__@return__ chat object with the specified params"
							},
							"response": [
								{
									"name": "Cant Start Chat with Shell Account",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createChat($memberIds: [ID!]!, $title: String) {\n    createChat(members: $memberIds, title: $title) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n\nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}",
												"variables": "{\n\t\"memberIds\": [\"37a5834d-df8e-4740-939d-62cc3bd99ba2\"]\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 23 Mar 2022 16:10:43 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "221"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"Can't start chat with shell account\",\n            \"name\": \"InvalidOperationShellAccount\",\n            \"code\": \"InvalidOperationShellAccount\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								}
							]
						},
						{
							"name": "Fetch Chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" let jsonBody = pm.response.json();",
											" let chatId = pm.collectionVariables.get(\"chat_id\");",
											" var senderId = pm.collectionVariables.get(\"user_id\");",
											" var receiverId = pm.collectionVariables.get(\"Second_user_id\");",
											" console.log(\"sender Id is: \"+senderId);",
											" console.log(\"receiver Id is\"+receiverId);",
											" var senderusername = pm.collectionVariables.get(\"username\");",
											" var receiverUsername = pm.collectionVariables.get(\"Second_username\");",
											" let MessageID = pm.collectionVariables.get(\"SendMessageId\");",
											"  console.log(\"messageId: \"+MessageID);",
											"let Message = pm.collectionVariables.get(\"message\");",
											" let Ids = [receiverId,senderId];",
											" let usernames = [receiverUsername,senderusername];",
											" console.log(\"Ids are: \"+Ids);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Verify base_structure of chat\", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat).to.includes.keys('id', 'title','type','muted','image', 'members','lastMessage','lastUnreadMessage','unreadPriorityMessages');",
											"});",
											"tests[\"Verify that the chatId should be same\"] = jsonBody.data.chat.id === chatId;",
											"",
											"for(var i =0 ; i < jsonBody.data.chat.members.length ;i++)",
											"{",
											"    pm.test(\"Verify base_structure of members\", function () ",
											"        {",
											"",
											"        pm.expect(jsonBody.data.chat.members[i]).to.includes.keys('id', 'firstname','lastname','username','addresses');",
											"    });",
											"",
											"    for(var j = 0; j < Ids.length; j++) {",
											"        if(jsonBody.data.chat.members[i].id === Ids[i]){",
											"            tests[\"Verify that sender and receiverId should be same:\"+ Ids[j]] = jsonBody.data.chat.members[i].id === Ids[j];",
											"",
											"            tests[\"Verify that sender and receiver usernames should be same:\"+ usernames[j]] = jsonBody.data.chat.members[i].username === usernames[j];",
											"        }",
											"    }",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query fetchChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    type\n    muted\n    image {\n        ...AttachmentFragment\n    }\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n \n \nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n    addresses {\n        id\n        address\n        type\n        access\n        ordinal\n    }\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n}",
										"variables": "{\n\t\"chatId\": \"{{chat_id}}\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Fetch chat referenced by given id.\n\n__@params__ chatId - id of the chat </br>\n__@return__ chat object with specified id"
							},
							"response": [
								{
									"name": "Fetch Chat - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fetchChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    image {\n        ...AttachmentFragment\n    }\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n \n \nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n    addresses {\n        id\n        address\n        type\n        access\n        ordinal\n    }\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n}",
												"variables": "{\n\t\"chatId\": \"9b98216c-76af-4402-bcc4-1d8415234485\"\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 09 Oct 2020 16:21:21 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4393"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"chat\": {\n            \"id\": \"9b98216c-76af-4402-bcc4-1d8415234485\",\n            \"title\": null,\n            \"image\": null,\n            \"members\": [\n                {\n                    \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n                    \"username\": \"umarazhar\",\n                    \"firstname\": \"Umar\",\n                    \"lastname\": \"Azhar\",\n                    \"addresses\": [\n                        {\n                            \"id\": \"dW1hckBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hciszQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+3@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcis1QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+5@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcis2Mjg4MkBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+62882@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitmZWhpdXI1NzJAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+fehiur572@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitoaWVqNjgzOEBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+hiej6838@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitqbDJramxrZnM1YXNAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+jl2kjlkfs5as@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitqbDJramxrZnM1YXNhQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+jl2kjlkfs5asa@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitsa2Fqc2RsMjM0MkBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+lkajsdl2342@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmcyQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org2@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmczQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org3@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmc0QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org4@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmc1QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org5@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcit0ZXNsa2FqZmRAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+teslkajfd@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"d15a26df-483c-4baf-8606-d7dee3076859\",\n                    \"username\": \"chilli12\",\n                    \"firstname\": \"Chinni12\",\n                    \"lastname\": \"chilli\",\n                    \"addresses\": []\n                }\n            ],\n            \"lastMessage\": {\n                \"id\": 146701,\n                \"type\": \"text\",\n                \"message\": \"Test\",\n                \"sender\": {\n                    \"id\": \"d15a26df-483c-4baf-8606-d7dee3076859\",\n                    \"username\": \"chilli12\",\n                    \"firstname\": \"Chinni12\",\n                    \"lastname\": \"chilli\",\n                    \"addresses\": []\n                },\n                \"dateCreated\": \"2019-12-18T17:06:49.942Z\"\n            },\n            \"lastUnreadMessage\": null,\n            \"unreadPriorityMessages\": []\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Send Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.chat.sendMessage;",
											"let Message = pm.collectionVariables.get(\"Message\");",
											"let senderId= pm.collectionVariables.get(\"user_id\");",
											"let senderUsername =pm.collectionVariables.get(\"username\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify base_structure of chat\", function () ",
											"       {",
											"",
											"    pm.expect(response).to.includes.keys('id', 'image','attachment','message','type', 'sender');",
											"});",
											"",
											"tests[\"Verify that there should be a valid sendMessage Id\"] = response.id !== null || response.id !== undefined ;",
											"tests[\"Verify that the message should be same\"] = response.message ===Message;",
											"tests[\"Verify that the message type should be text\"] = response.type ===\"text\";",
											"tests[\"Verify that the senderId should be same\"] = response.sender.id ===senderId;",
											"tests[\"Verify that the sender's username should be same\"] = response.sender.username ===senderUsername;",
											"",
											"pm.collectionVariables.set(\"SendMessageId\", response.id);",
											"let MessageID = pm.collectionVariables.get(\"SendMessageId\");",
											"console.log(\"Message ID is \"+MessageID)",
											"pm.collectionVariables.set(\"msgId\", response.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set(\"Message\", \"BE Automation testing\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"type": "text",
										"value": "{{scopetoken}}"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
										"variables": "{\n\t\"chatId\": \"{{chat_id}}\",\n\t\"message\": \"{{Message}}\",\n\t\"priority\": false\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Send message to specified chat\n\n__@params__  </br>\nchatId - the id of the chat we are sending the message to </br>\nmessage - the message we are sending </br>\n__@optional__ fileId - an id referencing the uploaded file on our S3 bucket (e.g. for file/picture messages). See __'Upload Files'__ </br>\ntype - the type of message we are sending (e.g. image, text, attachment) </br>\npriority - states whether or not the message is of high priority </br>\n\n__@return__ message object with specified parameters"
							},
							"response": [
								{
									"name": "User Not Member of Chat",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "196"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:14:24 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"User is not a member of chat\",\n            \"name\": \"UserNotMemberOfChat\",\n            \"code\": \"UserNotMemberOfChat\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								},
								{
									"name": "Access Token Expired",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "ETag",
											"value": "W/\"7e-GtRgWhqN7iKqYzLxAnMatoGWiNs\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:14:54 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidAccessToken\",\n    \"code\": \"InvalidAccessToken\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid token: access token has expired\"\n}"
								},
								{
									"name": "Invalid Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "125"
										},
										{
											"key": "ETag",
											"value": "W/\"7d-X5Hlvs/k/IQ8lqjZMIqbDZW5bJc\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:15:29 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidAccessToken\",\n    \"code\": \"InvalidAccessToken\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid token: access token is invalid\"\n}"
								},
								{
									"name": "Unauthorized Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "134"
										},
										{
											"key": "ETag",
											"value": "W/\"86-XDfIF2OBPyJh78GyxeEU0/dYOYY\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:15:43 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"UnauthorizedRequest\",\n    \"code\": \"UnauthorizedRequest\",\n    \"statusCode\": 401,\n    \"message\": \"Unauthorized request: no authentication given\"\n}"
								}
							]
						},
						{
							"name": "Change Chat Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"pm.collectionVariables.set(\"title\", \"Automation Test Title\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let title = pm.collectionVariables.get(\"title\");",
											"console.log(title);",
											"",
											"let chatId = pm.collectionVariables.get(\"chat_id\");",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify base_structure of edit Title\", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat.editTitle).to.includes.keys('id', 'title');",
											"});",
											"tests[\"Verify that the chat Id should be same\"] = jsonBody.data.chat.editTitle.id === chatId;",
											"tests[\"Verify that the title should be same\"] = jsonBody.data.chat.editTitle.title === title;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation EditChatTitle($title: String!, $chatId: ID!) {\n    chat(chatId: $chatId) {\n        editTitle(title: $title) {\n            id\n            title\n        }\n    }\n}",
										"variables": "{\n    \"chatId\": \"{{chat_id}}\",\n    \"title\": \"{{title}}\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Changes the title of the chat.\n\n__@params__  </br>\nchatId - the id of the chat we want to change the title of </br>\ntitle - title of the chat we want to change it to </br>\n\n\n__@return__ chat object with the updated title"
							},
							"response": []
						},
						{
							"name": "Fetch Chat After Change Chat Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" let jsonBody = pm.response.json();",
											" let chatId = pm.collectionVariables.get(\"chat_id\");",
											" var senderId = pm.collectionVariables.get(\"user_id\");",
											" var receiverId = pm.collectionVariables.get(\"Second_user_id\");",
											" var senderusername = pm.collectionVariables.get(\"username\");",
											" var receiverUsername = pm.collectionVariables.get(\"Second_username\");",
											" let MessageID = pm.collectionVariables.get(\"SendMessageId\");",
											"  console.log(\"messageId: \"+MessageID);",
											"let Message = pm.collectionVariables.get(\"message\");",
											"let title = pm.collectionVariables.get(\"title\");",
											" let Ids = [receiverId,senderId];",
											" let usernames = [receiverUsername,senderusername];",
											" console.log(\"Ids are: \"+Ids);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Verify that the chat title should be same\"] = jsonBody.data.chat.title === title;",
											"pm.test(\"Verify base_structure of chat\", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat).to.includes.keys('id', 'title','type','muted','image', 'members','lastMessage','lastUnreadMessage','unreadPriorityMessages');",
											"});",
											"tests[\"Verify that the chatId should be same\"] = jsonBody.data.chat.id === chatId;",
											"",
											"for(var i =0 ; i < jsonBody.data.chat.members.length ;i++)",
											"{",
											"    pm.test(\"Verify base_structure of members\", function () ",
											"        {",
											"",
											"        pm.expect(jsonBody.data.chat.members[i]).to.includes.keys('id', 'firstname','lastname','username','addresses');",
											"    });",
											"",
											"    for(var j = 0; j < Ids.length; j++) {",
											"        if(jsonBody.data.chat.members[i].id === Ids[j]) {",
											"            tests[\"Verify that sender and receiverId should be same:\"+ Ids[j]] = jsonBody.data.chat.members[i].id === Ids[j];",
											"",
											"            tests[\"Verify that sender and receiver usernames should be same:\"+ usernames[j]] = jsonBody.data.chat.members[i].username === usernames[j];",
											"        }",
											"    }",
											"",
											"   ",
											"}",
											"pm.test(\"Verify base_structure of last message\", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat.lastMessage).to.includes.keys('id', 'type','message','sender','dateCreated');",
											"});",
											"",
											"// tests[\"Verify that the last message Id should be same\"] = jsonBody.data.chat.lastMessage.id === MessageID;",
											"// tests[\"Verify that the last message type should be text\"] = jsonBody.data.chat.lastMessage.type === \"text\";",
											"// tests[\"Verify that the message content should be same\"] = jsonBody.data.chat.lastMessage.message === Message;",
											"// tests[\"Verify that the username of last message should be same\"] = jsonBody.data.chat.lastMessage.sender.username === senderusername;",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query fetchChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    type\n    muted\n    image {\n        ...AttachmentFragment\n    }\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n \n \nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n    addresses {\n        id\n        address\n        type\n        access\n        ordinal\n    }\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n}",
										"variables": "{\n\t\"chatId\": \"{{chat_id}}\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Fetch chat referenced by given id.\n\n__@params__ chatId - id of the chat </br>\n__@return__ chat object with specified id"
							},
							"response": [
								{
									"name": "Fetch Chat - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fetchChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    image {\n        ...AttachmentFragment\n    }\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n \n \nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n    addresses {\n        id\n        address\n        type\n        access\n        ordinal\n    }\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n}",
												"variables": "{\n\t\"chatId\": \"9b98216c-76af-4402-bcc4-1d8415234485\"\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 09 Oct 2020 16:21:21 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4393"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"chat\": {\n            \"id\": \"9b98216c-76af-4402-bcc4-1d8415234485\",\n            \"title\": null,\n            \"image\": null,\n            \"members\": [\n                {\n                    \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n                    \"username\": \"umarazhar\",\n                    \"firstname\": \"Umar\",\n                    \"lastname\": \"Azhar\",\n                    \"addresses\": [\n                        {\n                            \"id\": \"dW1hckBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hciszQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+3@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcis1QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+5@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcis2Mjg4MkBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+62882@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitmZWhpdXI1NzJAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+fehiur572@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitoaWVqNjgzOEBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+hiej6838@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitqbDJramxrZnM1YXNAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+jl2kjlkfs5as@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitqbDJramxrZnM1YXNhQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+jl2kjlkfs5asa@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitsa2Fqc2RsMjM0MkBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+lkajsdl2342@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmcyQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org2@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmczQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org3@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmc0QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org4@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmc1QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org5@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcit0ZXNsa2FqZmRAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+teslkajfd@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"d15a26df-483c-4baf-8606-d7dee3076859\",\n                    \"username\": \"chilli12\",\n                    \"firstname\": \"Chinni12\",\n                    \"lastname\": \"chilli\",\n                    \"addresses\": []\n                }\n            ],\n            \"lastMessage\": {\n                \"id\": 146701,\n                \"type\": \"text\",\n                \"message\": \"Test\",\n                \"sender\": {\n                    \"id\": \"d15a26df-483c-4baf-8606-d7dee3076859\",\n                    \"username\": \"chilli12\",\n                    \"firstname\": \"Chinni12\",\n                    \"lastname\": \"chilli\",\n                    \"addresses\": []\n                },\n                \"dateCreated\": \"2019-12-18T17:06:49.942Z\"\n            },\n            \"lastUnreadMessage\": null,\n            \"unreadPriorityMessages\": []\n        }\n    }\n}"
								}
							]
						}
					]
				},
				{
					"name": "Leave Group Chat Test",
					"item": [
						{
							"name": "Fetch user's Id of User 1 to create a group chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"Second_api_bearer\", jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"Second_refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"Second_username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"Second_firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"Second_lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"Second_user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"Second_role\", jsonData.response.user.role);",
											"",
											"let user_id =pm.collectionVariables.get(\"Second_user_id\");",
											"console.log(\"Second_user_id: \"+user_id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username2}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password2}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Fetch user's Id of User 2 to create a group chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"GroupMember-api_bearer\", jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"GroupMember-refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"GroupMember-username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"GroupMember-firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"GroupMember-lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"GroupMember-user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"GroupMember-role\", jsonData.response.user.role);",
											"",
											"let user_id =pm.collectionVariables.get(\"GroupMember-user_id\");",
											"console.log(\"GroupMember-user_id: \"+user_id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username3}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password3}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Fetch Access Token  of group Admin to create a group chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"admin_user_token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"role\", jsonData.response.user.role);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username1}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password1}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Create group chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.createChat;",
											"let GroupMember_username= pm.collectionVariables.get(\"GroupMember-username\");",
											"let GroupMember_firstname= pm.collectionVariables.get(\"GroupMember-firstname\");",
											"let GroupMember_lastname= pm.collectionVariables.get(\"GroupMember-lastname\");",
											"let GroupMember_user_id= pm.collectionVariables.get(\"GroupMember-user_id\");",
											"let member2Id = pm.collectionVariables.get(\"Second_user_id\");",
											"let member2Firstname = pm.collectionVariables.get(\"Second_firstname\");",
											"let member2Lastname = pm.collectionVariables.get(\"Second_lastname\");",
											"let member2Username = pm.collectionVariables.get(\"Second_username\");",
											"",
											"let userId = pm.collectionVariables.get(\"user_id\");",
											"let UserName = pm.collectionVariables.get(\"username\");",
											"let UserFirstName = pm.collectionVariables.get(\"firstname\");",
											"let UserLastName = pm.collectionVariables.get(\"lastname\");",
											"console.log(\"UserLastName: \" +UserLastName);",
											"let Ids = [member2Id,userId,GroupMember_user_id];",
											"let firstnames = [member2Firstname,UserFirstName,GroupMember_firstname];",
											"let lastnames = [member2Lastname,UserLastName,GroupMember_lastname];",
											"let usernames = [member2Username,UserName,GroupMember_username];",
											"pm.collectionVariables.set(\"chat_id\", response.id);",
											"console.log(\"member2Id: \" +member2Id);",
											"console.log(\"GroupMember_user_id: \" +GroupMember_user_id);",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code === 200) ",
											"{ ",
											"    for(var i =0 ; i < response.members.length ;i++)",
											"    {",
											"        pm.test(\"Verify base_structure of members\", function () ",
											"            {",
											"",
											"            pm.expect(response.members[i]).to.includes.keys('id', 'username','firstname','lastname');",
											"        });  ",
											"        ",
											"        for(var j=0 ; j < Ids.length; j++) {",
											"            if (response.members[i].id === Ids[j]) {",
											"                 tests[\"Verify that the userId should be same: \"+response.members[i].id] = response.members[i].id === Ids[j];",
											"                tests[\"Verify that the username should be same: \"+response.members[i].username] = response.members[i].username === usernames[j];",
											"                tests[\"Verify that the firstname should be same: \"+response.members[i].firstname] = response.members[i].firstname === firstnames[j];",
											"                tests[\"Verify that the lastname should be same: \"+response.members[i].lastname] = response.members[i].lastname === lastnames[j];",
											"            }",
											"        }",
											"",
											"       ",
											"    }",
											"//   pm.test(\"Verify base_structure of lastMessage \", function () ",
											"//        {",
											"",
											"//     pm.expect(response.lastMessage).to.includes.keys('id', 'type','message','sender','dateCreated');",
											"// });",
											"// pm.test(\"Verify base_structure of sender\", function () ",
											"//        {",
											"",
											"//     pm.expect(response.lastMessage.sender).to.includes.keys('id','username','firstname','lastname');",
											"// }); ",
											"",
											"",
											"",
											"}",
											"pm.collectionVariables.set(\"groupChatID\", jsonBody.data.createChat.id);",
											"    let groupChatID= pm.collectionVariables.get(\"groupChatID\");",
											"console.log(\"groupChatID: \"+groupChatID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{admin_user_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createChat($memberIds: [ID!]!, $title: String) {\n    createChat(members: $memberIds, title: $title) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n\nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}",
										"variables": "{\n\t\"memberIds\": [\"{{Second_user_id}}\" , \"{{GroupMember-user_id}}\"]\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Create a new chat. If chat matching similar pattern already exists then returns existing chat.\n\n__@params__  </br>\nmemberIds - an array of ids of the users we want in the chat </br>\ntitle - the initial title of the chat </br>\n\n__@return__ chat object with the specified params"
							},
							"response": [
								{
									"name": "Cant Start Chat with Shell Account",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createChat($memberIds: [ID!]!, $title: String) {\n    createChat(members: $memberIds, title: $title) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n\nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}",
												"variables": "{\n\t\"memberIds\": [\"37a5834d-df8e-4740-939d-62cc3bd99ba2\"]\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 23 Mar 2022 16:10:43 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "221"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"Can't start chat with shell account\",\n            \"name\": \"InvalidOperationShellAccount\",\n            \"code\": \"InvalidOperationShellAccount\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								}
							]
						},
						{
							"name": "Fetch Group Chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" let jsonBody = pm.response.json();",
											" let chatId = pm.collectionVariables.get(\"groupChatID\");",
											" let GroupMember_username= pm.collectionVariables.get(\"GroupMember-username\");",
											"let GroupMember_firstname= pm.collectionVariables.get(\"GroupMember-firstname\");",
											"let GroupMember_lastname= pm.collectionVariables.get(\"GroupMember-lastname\");",
											"let GroupMember_user_id= pm.collectionVariables.get(\"GroupMember-user_id\");",
											"let member2Id = pm.collectionVariables.get(\"Second_user_id\");",
											"let member2Firstname = pm.collectionVariables.get(\"Second_firstname\");",
											"let member2Lastname = pm.collectionVariables.get(\"Second_lastname\");",
											"let member2Username = pm.collectionVariables.get(\"Second_username\");",
											"let userId = pm.collectionVariables.get(\"user_id\");",
											"let UserName = pm.collectionVariables.get(\"username\");",
											"let UserFirstName = pm.collectionVariables.get(\"firstname\");",
											"let UserLastName = pm.collectionVariables.get(\"lastname\");",
											"console.log(\"UserLastName: \" +UserLastName);",
											"let Ids = [member2Id,userId,GroupMember_user_id];",
											"let firstnames = [member2Firstname,UserFirstName,GroupMember_firstname];",
											"let lastnames = [member2Lastname,UserLastName,GroupMember_lastname];",
											"let usernames = [member2Username,UserName,GroupMember_username];",
											"  console.log(\"username: \"+usernames[1]);",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"if (pm.response.code === 200) ",
											"{ ",
											"pm.test(\"Verify base_structure of chat\", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.chat).to.includes.keys('id', 'title','type','muted','image', 'members','lastMessage','lastUnreadMessage','unreadPriorityMessages');",
											"});",
											"tests[\"Verify that the chatId should be same\"] = jsonBody.data.chat.id === chatId;",
											"tests[\"Verify that the chat type should be grup\"] = jsonBody.data.chat.type=== \"group\";",
											"for(var i =0 ; i < jsonBody.data.chat.members.length ;i++)",
											"{",
											"    pm.test(\"Verify base_structure of members\", function () ",
											"        {",
											"",
											"        pm.expect(jsonBody.data.chat.members[i]).to.includes.keys('id', 'firstname','lastname','username','addresses');",
											"    });",
											"",
											"    for (var j = 0; j < Ids.length; j++) {",
											"        if(jsonBody.data.chat.members[i].id === Ids[j]) {",
											"            tests[\"Verify that member's Ids should be same:\"+ Ids[i]] = jsonBody.data.chat.members[i].id === Ids[j];",
											"            tests[\"Verify that member's usernames should be same:\"+ usernames[i]] = jsonBody.data.chat.members[i].username === usernames[j];",
											"            tests[\"Verify that member's lastnames should be same:\"+ lastnames[i]] = jsonBody.data.chat.members[i].lastname === lastnames[j];",
											"            tests[\"Verify that member's firstnames should be same:\"+ firstnames[i]] = jsonBody.data.chat.members[i].firstname === firstnames[j];",
											"        }",
											"    }",
											"",
											"",
											"",
											"}",
											"",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{admin_user_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query fetchChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    type\n    muted\n    image {\n        ...AttachmentFragment\n    }\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n \n \nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n    addresses {\n        id\n        address\n        type\n        access\n        ordinal\n    }\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n}",
										"variables": "{\n\t\"chatId\": \"{{groupChatID}}\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Fetch chat referenced by given id.\n\n__@params__ chatId - id of the chat </br>\n__@return__ chat object with specified id"
							},
							"response": [
								{
									"name": "Fetch Chat - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fetchChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    image {\n        ...AttachmentFragment\n    }\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n \n \nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n    addresses {\n        id\n        address\n        type\n        access\n        ordinal\n    }\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n}",
												"variables": "{\n\t\"chatId\": \"9b98216c-76af-4402-bcc4-1d8415234485\"\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 09 Oct 2020 16:21:21 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4393"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"chat\": {\n            \"id\": \"9b98216c-76af-4402-bcc4-1d8415234485\",\n            \"title\": null,\n            \"image\": null,\n            \"members\": [\n                {\n                    \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n                    \"username\": \"umarazhar\",\n                    \"firstname\": \"Umar\",\n                    \"lastname\": \"Azhar\",\n                    \"addresses\": [\n                        {\n                            \"id\": \"dW1hckBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hciszQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+3@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcis1QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+5@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcis2Mjg4MkBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+62882@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitmZWhpdXI1NzJAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+fehiur572@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitoaWVqNjgzOEBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+hiej6838@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitqbDJramxrZnM1YXNAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+jl2kjlkfs5as@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitqbDJramxrZnM1YXNhQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+jl2kjlkfs5asa@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitsa2Fqc2RsMjM0MkBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+lkajsdl2342@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmcyQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org2@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmczQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org3@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmc0QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org4@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmc1QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org5@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcit0ZXNsa2FqZmRAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+teslkajfd@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"d15a26df-483c-4baf-8606-d7dee3076859\",\n                    \"username\": \"chilli12\",\n                    \"firstname\": \"Chinni12\",\n                    \"lastname\": \"chilli\",\n                    \"addresses\": []\n                }\n            ],\n            \"lastMessage\": {\n                \"id\": 146701,\n                \"type\": \"text\",\n                \"message\": \"Test\",\n                \"sender\": {\n                    \"id\": \"d15a26df-483c-4baf-8606-d7dee3076859\",\n                    \"username\": \"chilli12\",\n                    \"firstname\": \"Chinni12\",\n                    \"lastname\": \"chilli\",\n                    \"addresses\": []\n                },\n                \"dateCreated\": \"2019-12-18T17:06:49.942Z\"\n            },\n            \"lastUnreadMessage\": null,\n            \"unreadPriorityMessages\": []\n        }\n    }\n}"
								}
							]
						},
						{
							"name": "Loged in with other member to leave chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"second_member_token\",\"Bearer \" + jsonData.response.accessToken);",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username2}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password2}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Leave Chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"tests[\"Verify that leave chat should be true\"] = jsonBody.data.chat.leave === true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{second_member_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation LeaveChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        leave\n    }\n}",
										"variables": "{\n\t\"chatId\": \"{{groupChatID}}\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Group Chat after Leave chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" let jsonBody = pm.response.json();",
											" let chatId = pm.collectionVariables.get(\"groupChatID\");",
											"let member2Id = pm.collectionVariables.get(\"Second_user_id\");",
											"let member2Firstname = pm.collectionVariables.get(\"Second_firstname\");",
											"let member2Lastname = pm.collectionVariables.get(\"Second_lastname\");",
											"let member2Username = pm.collectionVariables.get(\"Second_username\");",
											"let userId = pm.collectionVariables.get(\"user_id\");",
											"let UserName = pm.collectionVariables.get(\"username\");",
											"let UserFirstName = pm.collectionVariables.get(\"firstname\");",
											"let UserLastName = pm.collectionVariables.get(\"lastname\");",
											"console.log(\"UserLastName: \" +UserLastName);",
											"let Ids = [member2Id,userId];",
											"let firstnames = [member2Firstname,UserFirstName];",
											"let lastnames = [member2Lastname,UserLastName];",
											"let usernames = [member2Username,UserName];",
											"  console.log(\"username: \"+usernames[1]);",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"if (pm.response.code === 200) ",
											"{ ",
											"    pm.test(\"Verify base_structure of chat\", function () ",
											"        {",
											"",
											"        pm.expect(jsonBody.data.chat).to.includes.keys('id', 'title','type','muted','image', 'members','lastMessage','lastUnreadMessage','unreadPriorityMessages');",
											"    });",
											"    tests[\"Verify that the chatId should be same\"] = jsonBody.data.chat.id === chatId;",
											"    tests[\"Verify that the chat type should be grup\"] = jsonBody.data.chat.type=== \"group\";",
											"",
											"    for(var i =0 ; i < jsonBody.data.chat.members.length ;i++)",
											"    {",
											"        pm.test(\"Verify base_structure of members\", function () ",
											"            {",
											"",
											"            pm.expect(jsonBody.data.chat.members[i]).to.includes.keys('id', 'firstname','lastname','username','addresses');",
											"        });",
											"",
											"        for(var j = 0; j < Ids.length; j++) {",
											"            if (jsonBody.data.chat.members[i].id === Ids[j]) {",
											"                tests[\"Verify that member's Ids should be same:\"+ Ids[i]] = jsonBody.data.chat.members[i].id === Ids[j];",
											"                tests[\"Verify that member's usernames should be same:\"+ usernames[i]] = jsonBody.data.chat.members[i].username === usernames[j];",
											"                tests[\"Verify that member's lastnames should be same:\"+ lastnames[i]] = jsonBody.data.chat.members[i].lastname === lastnames[j];",
											"                tests[\"Verify that member's firstnames should be same:\"+ firstnames[i]] = jsonBody.data.chat.members[i].firstname === firstnames[j];",
											"                }",
											"        }",
											"",
											"",
											"    }",
											"",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{admin_user_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query fetchChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    type\n    muted\n    image {\n        ...AttachmentFragment\n    }\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n \n \nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n    addresses {\n        id\n        address\n        type\n        access\n        ordinal\n    }\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n}",
										"variables": "{\n\t\"chatId\": \"{{groupChatID}}\"\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Fetch chat referenced by given id.\n\n__@params__ chatId - id of the chat </br>\n__@return__ chat object with specified id"
							},
							"response": [
								{
									"name": "Fetch Chat - Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query fetchChat($chatId: ID!) {\n    chat(chatId: $chatId) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    image {\n        ...AttachmentFragment\n    }\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n \n \nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n    addresses {\n        id\n        address\n        type\n        access\n        ordinal\n    }\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n}",
												"variables": "{\n\t\"chatId\": \"9b98216c-76af-4402-bcc4-1d8415234485\"\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 09 Oct 2020 16:21:21 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "4393"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": {\n        \"chat\": {\n            \"id\": \"9b98216c-76af-4402-bcc4-1d8415234485\",\n            \"title\": null,\n            \"image\": null,\n            \"members\": [\n                {\n                    \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n                    \"username\": \"umarazhar\",\n                    \"firstname\": \"Umar\",\n                    \"lastname\": \"Azhar\",\n                    \"addresses\": [\n                        {\n                            \"id\": \"dW1hckBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hciszQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+3@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcis1QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+5@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcis2Mjg4MkBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+62882@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitmZWhpdXI1NzJAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+fehiur572@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitoaWVqNjgzOEBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+hiej6838@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitqbDJramxrZnM1YXNAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+jl2kjlkfs5as@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitqbDJramxrZnM1YXNhQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+jl2kjlkfs5asa@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitsa2Fqc2RsMjM0MkBoeXBlcmNhcmUuY29t\",\n                            \"address\": \"umar+lkajsdl2342@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmcyQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org2@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmczQGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org3@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmc0QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org4@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcitvcmc1QGh5cGVyY2FyZS5jb20=\",\n                            \"address\": \"umar+org5@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        },\n                        {\n                            \"id\": \"dW1hcit0ZXNsa2FqZmRAaHlwZXJjYXJlLmNvbQ==\",\n                            \"address\": \"umar+teslkajfd@hypercare.com\",\n                            \"type\": \"email\",\n                            \"access\": \"public\",\n                            \"ordinal\": \"primary\"\n                        }\n                    ]\n                },\n                {\n                    \"id\": \"d15a26df-483c-4baf-8606-d7dee3076859\",\n                    \"username\": \"chilli12\",\n                    \"firstname\": \"Chinni12\",\n                    \"lastname\": \"chilli\",\n                    \"addresses\": []\n                }\n            ],\n            \"lastMessage\": {\n                \"id\": 146701,\n                \"type\": \"text\",\n                \"message\": \"Test\",\n                \"sender\": {\n                    \"id\": \"d15a26df-483c-4baf-8606-d7dee3076859\",\n                    \"username\": \"chilli12\",\n                    \"firstname\": \"Chinni12\",\n                    \"lastname\": \"chilli\",\n                    \"addresses\": []\n                },\n                \"dateCreated\": \"2019-12-18T17:06:49.942Z\"\n            },\n            \"lastUnreadMessage\": null,\n            \"unreadPriorityMessages\": []\n        }\n    }\n}"
								}
							]
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Urgent Loading Chat Test",
					"item": [
						{
							"name": "Fetch sender Access Token to create a chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"role\", jsonData.response.user.role);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username1}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password1}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Fetch receiver user Id to create a chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											" ",
											" pm.collectionVariables.set(\"receiver_token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"Second_refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"Second_username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"Second_firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"Second_lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"Second_user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"Second_role\", jsonData.response.user.role);",
											"",
											"let user_id =pm.collectionVariables.get(\"Second_user_id\");",
											"console.log(\"Second_user_id: \"+user_id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username2}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password2}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Create Chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.createChat;",
											"",
											"pm.collectionVariables.set(\"chat_id\", response.id);",
											"  pm.test(\"Verify base_structure of createChat \", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.createChat).to.includes.keys('id', 'title','members','lastMessage','lastUnreadMessage', 'unreadPriorityMessages');",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createChat($memberIds: [ID!]!, $title: String) {\n    createChat(members: $memberIds, title: $title) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n\nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}",
										"variables": "{\n\t\"memberIds\": [\"{{Second_user_id}}\"]\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Create a new chat. If chat matching similar pattern already exists then returns existing chat.\n\n__@params__  </br>\nmemberIds - an array of ids of the users we want in the chat </br>\ntitle - the initial title of the chat </br>\n\n__@return__ chat object with the specified params"
							},
							"response": [
								{
									"name": "Cant Start Chat with Shell Account",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createChat($memberIds: [ID!]!, $title: String) {\n    createChat(members: $memberIds, title: $title) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n\nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}",
												"variables": "{\n\t\"memberIds\": [\"37a5834d-df8e-4740-939d-62cc3bd99ba2\"]\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 23 Mar 2022 16:10:43 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "221"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"Can't start chat with shell account\",\n            \"name\": \"InvalidOperationShellAccount\",\n            \"code\": \"InvalidOperationShellAccount\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								}
							]
						},
						{
							"name": "Send Urgent Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.chat.sendMessage;",
											"let Message = pm.collectionVariables.get(\"UrgentMessage\");",
											"let senderId= pm.collectionVariables.get(\"user_id\");",
											"let senderUsername =pm.collectionVariables.get(\"username\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify base_structure of chat\", function () ",
											"       {",
											"",
											"    pm.expect(response).to.includes.keys('id', 'image','attachment','message','type', 'sender');",
											"});",
											"",
											"tests[\"Verify that there should be a valid sendMessage Id\"] = response.id !== null || response.id !== undefined ;",
											"tests[\"Verify that the message should be same\"] = response.message ===Message;",
											"tests[\"Verify that the message type should be text\"] = response.type ===\"text\";",
											"tests[\"Verify that the senderId should be same\"] = response.sender.id ===senderId;",
											"tests[\"Verify that the sender's username should be same\"] = response.sender.username ===senderUsername;",
											"",
											"pm.collectionVariables.set(\"urgentMessageID\", response.id);",
											"let msgID = pm.collectionVariables.get(\"urgentMessageID\");",
											"",
											"console.log(\"Message ID is \"+msgID)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"pm.collectionVariables.set(\"UrgentMessage\", \"Urgent message from postman\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"type": "text",
										"value": "{{scopetoken}}"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priorityType: MessagePriority) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priorityType: $priorityType) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
										"variables": "{\n\t\"chatId\": \"{{chat_id}}\",\n\t\"message\": \"{{UrgentMessage}}\",\n\t\"priorityType\": \"urgent\"\n}\n\n"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Send message to specified chat\n\n__@params__  </br>\nchatId - the id of the chat we are sending the message to </br>\nmessage - the message we are sending </br>\n__@optional__ fileId - an id referencing the uploaded file on our S3 bucket (e.g. for file/picture messages). See __'Upload Files'__ </br>\ntype - the type of message we are sending (e.g. image, text, attachment) </br>\npriority - states whether or not the message is of high priority </br>\n\n__@return__ message object with specified parameters"
							},
							"response": [
								{
									"name": "User Not Member of Chat",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "196"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:14:24 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"User is not a member of chat\",\n            \"name\": \"UserNotMemberOfChat\",\n            \"code\": \"UserNotMemberOfChat\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								},
								{
									"name": "Access Token Expired",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "ETag",
											"value": "W/\"7e-GtRgWhqN7iKqYzLxAnMatoGWiNs\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:14:54 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidAccessToken\",\n    \"code\": \"InvalidAccessToken\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid token: access token has expired\"\n}"
								},
								{
									"name": "Invalid Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "125"
										},
										{
											"key": "ETag",
											"value": "W/\"7d-X5Hlvs/k/IQ8lqjZMIqbDZW5bJc\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:15:29 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidAccessToken\",\n    \"code\": \"InvalidAccessToken\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid token: access token is invalid\"\n}"
								},
								{
									"name": "Unauthorized Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "134"
										},
										{
											"key": "ETag",
											"value": "W/\"86-XDfIF2OBPyJh78GyxeEU0/dYOYY\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:15:43 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"UnauthorizedRequest\",\n    \"code\": \"UnauthorizedRequest\",\n    \"statusCode\": 401,\n    \"message\": \"Unauthorized request: no authentication given\"\n}"
								}
							]
						},
						{
							"name": "Fetch Urgent Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.chats;",
											"let Message = pm.collectionVariables.get(\"UrgentMessage\");",
											"let username = pm.collectionVariables.get(\"username\");",
											"var senderId = pm.collectionVariables.get(\"user_id\");",
											"",
											"console.log(\"Message is \"+Message)",
											"if (pm.response.code === 200) ",
											"{",
											"    tests[\"Verify that the priority typpe should be urgent\"] = response.chats[0].lastMessage.priorityType ===\"urgent\";",
											"    tests[\"Verify that the message should be same\"] = response.chats[0].lastMessage.message ===Message;",
											"    tests[\"Verify that the date created should not null\"] = response.chats[0].lastMessage.dateCreated != null;",
											"     tests[\"Verify that the message sender Id should be same\"] = response.chats[0].lastMessage.sender.id ===senderId;",
											"      tests[\"Verify that the message sender username should be same\"] = response.chats[0].lastMessage.sender.username ===username;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{receiver_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query organizationChats($continuationId: ID, $limit: Int, $priority: MessagePriority) {\n  chats(continuationId: $continuationId, limit: $limit, priority: $priority) {\n    chats {\n      ...basicChatFields\n    }\n  }\n}\n\nfragment basicChatFields on Chat {\n  id\n  title\n  type\n  lastMessage {\n    ...messageFields\n  }\n  muted\n  dateCreated\n  isArchived\n}\n\nfragment messageFields on Message {\n  id\n  priorityType\n  message\n  image\n#   attachment {\n#     url\n#     mimeType\n#     fileName\n#   }\n  type\n  dateCreated\n  sender {\n    ...publicUserFields\n  }\n  readBy {\n    ...readReceiptFields\n  }\n  data {\n    __typename\n    ... on ConsultMessageData {\n      mrn\n      firstname\n      lastname\n      details\n    }\n  }\n}\n\nfragment readReceiptFields on ReadReceipt {\n  messageId\n  user {\n    ...publicUserFields\n  }\n  timestamp\n}\n\nfragment publicUserFields on PublicUser {\n  id\n  firstname\n  lastname\n  username\n  role\n  profilePic {\n    url\n  }\n  workStatus\n  statusDescription\n  workStatusProxy {\n    ...publicUserStatusFields\n  }\n}\n\nfragment publicUserStatusFields on PublicUser {\n  id\n  firstname\n  lastname\n  username\n  role\n  profilePic {\n    url\n  }\n}\n\n",
										"variables": "{\n\t\"priority\": \"urgent\",\n    \"limit\": 10\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Fetch paginated messages for chat referenced by given id. </br>\n__Note__: This endpoint only paginates upwards.\n\n__@params__  </br>\nchatId - the id referencing the chat to fetch messages for </br>\ncontinuationId - the id of the message to start paginating from </br>\nlimit - the number of messages to load </br>\n\n__@return__ a list of messages"
							},
							"response": []
						},
						{
							"name": "Read Urgent Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"if (pm.response.code === 200) ",
											"{",
											"pm.test(\"All the messages were read\", function(){",
											" let messageRead = jsonBody.data.chat.messagesRead;",
											" console.log(\"The messages are:\", messageRead);",
											" pm.expect(messageRead).to.equal(true);",
											"})",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let chatId = pm.collectionVariables.get(\"chat_id\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{receiver_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation readMessage($chatId: ID!, $messageIds: [Int!]!) {\n    chat(chatId: $chatId) {\n        messagesRead(messageIds: $messageIds)\n    }\n}",
										"variables": "{\n\t\"chatId\": \"{{chat_id}}\",\n\t\"messageIds\": [\"{{urgentMessageID}}\"]\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Marks message as read by user\n\n__@params__  </br>\nchatId - the id of the chat the message belongs to </br>\nmessageIds - an array of ids of the messages we want to mark as read </br>"
							},
							"response": []
						},
						{
							"name": "Fetch Urgent Message after read message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"if (pm.response.code === 200) ",
											"{",
											"   ",
											"pm.test(\"Data array is empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.chats.chats.length).to.eql(0);",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{receiver_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query organizationChats($continuationId: ID, $limit: Int, $priority: MessagePriority) {\n  chats(continuationId: $continuationId, limit: $limit, priority: $priority) {\n    chats {\n      ...basicChatFields\n    }\n  }\n}\n\nfragment basicChatFields on Chat {\n  id\n  title\n  type\n  lastMessage {\n    ...messageFields\n  }\n  muted\n  dateCreated\n  isArchived\n}\n\nfragment messageFields on Message {\n  id\n  priorityType\n  message\n  image\n#   attachment {\n#     url\n#     mimeType\n#     fileName\n#   }\n  type\n  dateCreated\n  sender {\n    ...publicUserFields\n  }\n  readBy {\n    ...readReceiptFields\n  }\n  data {\n    __typename\n    ... on ConsultMessageData {\n      mrn\n      firstname\n      lastname\n      details\n    }\n  }\n}\n\nfragment readReceiptFields on ReadReceipt {\n  messageId\n  user {\n    ...publicUserFields\n  }\n  timestamp\n}\n\nfragment publicUserFields on PublicUser {\n  id\n  firstname\n  lastname\n  username\n  role\n  profilePic {\n    url\n  }\n  workStatus\n  statusDescription\n  workStatusProxy {\n    ...publicUserStatusFields\n  }\n}\n\nfragment publicUserStatusFields on PublicUser {\n  id\n  firstname\n  lastname\n  username\n  role\n  profilePic {\n    url\n  }\n}\n\n",
										"variables": "{\n\t\"priority\": \"urgent\",\n    \"limit\": 10\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Fetch paginated messages for chat referenced by given id. </br>\n__Note__: This endpoint only paginates upwards.\n\n__@params__  </br>\nchatId - the id referencing the chat to fetch messages for </br>\ncontinuationId - the id of the message to start paginating from </br>\nlimit - the number of messages to load </br>\n\n__@return__ a list of messages"
							},
							"response": []
						}
					]
				},
				{
					"name": "Stat Loading Chat Test",
					"item": [
						{
							"name": "Fetch sender Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"     pm.collectionVariables.set(\"token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"role\", jsonData.response.user.role);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username1}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password1}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Fetch receiver user Id to create a chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//API status code assertion",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"base_structure\", function () {",
											"",
											"    pm.expect(jsonData.response).to.includes.keys('accessToken', 'refreshToken');",
											"});",
											"",
											"pm.test(\"contains_user\", function () {",
											"  ",
											"    pm.expect(jsonData.response).to.includes.keys('user');",
											"    pm.expect(jsonData.response.user).to.includes.keys('id', 'firstname', 'username');",
											"})",
											"",
											"if (pm.response.code === 200) {",
											"    console.log(jsonData.response, 'Response Data');",
											"    console.log(jsonData.response.accessToken, 'Access Token');",
											"",
											"    pm.collectionVariables.set(\"receiver_token\", \"Bearer \"+jsonData.response.accessToken);",
											"    pm.collectionVariables.set(\"Second_refresh_token\", jsonData.response.refreshToken);",
											"}",
											"pm.collectionVariables.set(\"Second_username\", jsonData.response.user.username);",
											"pm.collectionVariables.set(\"Second_firstname\", jsonData.response.user.firstname);",
											"pm.collectionVariables.set(\"Second_lastname\", jsonData.response.user.lastname);",
											"pm.collectionVariables.set(\"Second_user_id\", jsonData.response.user.id);",
											"pm.collectionVariables.set(\"Second_role\", jsonData.response.user.role);",
											"",
											"let user_id =pm.collectionVariables.get(\"Second_user_id\");",
											"console.log(\"Second_user_id: \"+user_id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "democlientsecret",
											"type": "string"
										},
										{
											"key": "username",
											"value": "democlient",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username2}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password2}}",
											"type": "text"
										},
										{
											"key": "deviceId",
											"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"oauth",
										"token"
									]
								},
								"description": "Fetches access token for a user.\n\n__@params__  </br>\ngrant_type - the type of login (e.g. password, refresh_token) </br>\nusername - username of the user if grant_type == password </br>\npassword - password of the user if grant_type == password </br>\n__@optional__ refresh_token - the refresh token if grant_type == refresh_token"
							},
							"response": [
								{
									"name": "New Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "1178"
										},
										{
											"key": "ETag",
											"value": "W/\"49a-dKzPhQyNpNx/GUdPDS54dfagrJU\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:26 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"response\": {\n        \"accessToken\": \"8cff3dda428fa3912237cb86d1d60c4780ad4070\",\n        \"accessTokenExpiresAt\": \"2022-03-16T12:11:26.000Z\",\n        \"refreshToken\": \"62f226fc4d6d5a519e49b39b94ebe9972d577f38\",\n        \"refreshTokenExpiresAt\": \"2023-02-14T12:11:26.000Z\",\n        \"scope\": {\n            \"organizationId\": null,\n            \"siteId\": null,\n            \"departmentId\": null\n        },\n        \"client\": {\n            \"id\": 1,\n            \"name\": null,\n            \"client_id\": \"democlient\",\n            \"client_secret\": \"democlientsecret\",\n            \"redirect_uri\": \"http://localhost/cb\",\n            \"grant_types\": \"password\",\n            \"scope\": null,\n            \"user_id\": \"random\",\n            \"grants\": [\n                \"password\",\n                \"refresh_token\",\n                \"auth0_sso_grant\"\n            ],\n            \"accessTokenLifetime\": 2592000,\n            \"refreshTokenLifetime\": 31536000\n        },\n        \"user\": {\n            \"id\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"firstname\": \"Umar\",\n            \"lastname\": \"Azhar\",\n            \"username\": \"umarazhar\",\n            \"role\": \"Chief Technology Officer/2M-06 08A 10A 09 06A 05 09A\",\n            \"imageUrl\": \"https://hypercare-api-staging-images.s3.ca-central-1.amazonaws.com/20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8/32bccccd-ef6b-4000-8504-49fbe300cc1a.png\",\n            \"status\": \"active\",\n            \"workStatus\": \"on_shift\",\n            \"statusExpiryDate\": null,\n            \"statusDescription\": null,\n            \"workStatusProxyId\": \"20bfe8b5-62a4-4af8-9df7-6c7c5950d1c8\",\n            \"eulaStatus\": true,\n            \"lastLoginAttempt\": \"2022-02-14T17:10:57.000Z\",\n            \"failedLoginCount\": 0,\n            \"scope\": {}\n        }\n    }\n}"
								},
								{
									"name": "Invalid Username/Password",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "112"
										},
										{
											"key": "ETag",
											"value": "W/\"70-huKgVeUTPcy9KAru/cdHV1TaWQM\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:11:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidCredentials\",\n    \"code\": \"InvalidCredentials\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid username/password\"\n}"
								},
								{
									"name": "Invalid Client",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "deviceId",
													"value": "96cdc00a-802f-4592-a340-7bf93ae5ebfe",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/oauth/token",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "127"
										},
										{
											"key": "ETag",
											"value": "W/\"7f-o9h4tSp8W2HDABkXkm5f9VF48T4\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:13:51 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidClient\",\n    \"code\": \"InvalidClient\",\n    \"statusCode\": 400,\n    \"message\": \"Invalid client: cannot retrieve client credentials\"\n}"
								}
							]
						},
						{
							"name": "Create Chat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.createChat;",
											"",
											"pm.collectionVariables.set(\"chat_id\", response.id);",
											"  pm.test(\"Verify base_structure of createChat \", function () ",
											"       {",
											"",
											"    pm.expect(jsonBody.data.createChat).to.includes.keys('id', 'title','members','lastMessage','lastUnreadMessage', 'unreadPriorityMessages');",
											"});",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createChat($memberIds: [ID!]!, $title: String) {\n    createChat(members: $memberIds, title: $title) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n\nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}",
										"variables": "{\n\t\"memberIds\": [\"{{Second_user_id}}\"]\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Create a new chat. If chat matching similar pattern already exists then returns existing chat.\n\n__@params__  </br>\nmemberIds - an array of ids of the users we want in the chat </br>\ntitle - the initial title of the chat </br>\n\n__@return__ chat object with the specified params"
							},
							"response": [
								{
									"name": "Cant Start Chat with Shell Account",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"value": "{{scopetoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createChat($memberIds: [ID!]!, $title: String) {\n    createChat(members: $memberIds, title: $title) {\n        ...ChatFragment\n    }\n}\n\nfragment ChatFragment on Chat {\n    id\n    title\n    members {\n        ...GeneralUserFragment\n    }\n    lastMessage {\n        ...MessageFragment\n    }\n    lastUnreadMessage {\n        ...MessageFragment\n    }\n    unreadPriorityMessages\n}\n\nfragment GeneralUserFragment on GeneralUser {\n    id\n    username\n    firstname\n    lastname\n}\n\nfragment MessageFragment on Message {\n    id\n    type\n    message\n    sender {\n        ...GeneralUserFragment\n    }\n    dateCreated\n}",
												"variables": "{\n\t\"memberIds\": [\"37a5834d-df8e-4740-939d-62cc3bd99ba2\"]\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 23 Mar 2022 16:10:43 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "221"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"Can't start chat with shell account\",\n            \"name\": \"InvalidOperationShellAccount\",\n            \"code\": \"InvalidOperationShellAccount\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								}
							]
						},
						{
							"name": "Send Stat Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.chat.sendMessage;",
											"let Message = pm.collectionVariables.get(\"StatMessage\");",
											"let senderId= pm.collectionVariables.get(\"user_id\");",
											"let senderUsername =pm.collectionVariables.get(\"username\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify base_structure of chat\", function () ",
											"       {",
											"",
											"    pm.expect(response).to.includes.keys('id', 'image','attachment','message','type', 'sender');",
											"});",
											"",
											"tests[\"Verify that there should be a valid sendMessage Id\"] = response.id !== null || response.id !== undefined ;",
											"tests[\"Verify that the message should be same\"] = response.message ===Message;",
											"tests[\"Verify that the message type should be text\"] = response.type ===\"text\";",
											"tests[\"Verify that the senderId should be same\"] = response.sender.id ===senderId;",
											"tests[\"Verify that the sender's username should be same\"] = response.sender.username ===senderUsername;",
											"",
											"",
											"pm.collectionVariables.set(\"statMessageID\", response.id);",
											"let msgID = pm.collectionVariables.get(\"statMessageID\");",
											"",
											"console.log(\"Message ID is \"+msgID)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"pm.collectionVariables.set(\"StatMessage\", \"Stat message from postman\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"type": "text",
										"value": "{{scopetoken}}"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priorityType: MessagePriority) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priorityType: $priorityType) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
										"variables": "{\n\t\"chatId\": \"{{chat_id}}\",\n\t\"message\": \"{{StatMessage}}\",\n\t\"priorityType\": \"stat\"\n}\n\n"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Send message to specified chat\n\n__@params__  </br>\nchatId - the id of the chat we are sending the message to </br>\nmessage - the message we are sending </br>\n__@optional__ fileId - an id referencing the uploaded file on our S3 bucket (e.g. for file/picture messages). See __'Upload Files'__ </br>\ntype - the type of message we are sending (e.g. image, text, attachment) </br>\npriority - states whether or not the message is of high priority </br>\n\n__@return__ message object with specified parameters"
							},
							"response": [
								{
									"name": "User Not Member of Chat",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "196"
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:14:24 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"errors\": [\n        {\n            \"message\": \"User is not a member of chat\",\n            \"name\": \"UserNotMemberOfChat\",\n            \"code\": \"UserNotMemberOfChat\",\n            \"statusCode\": 400\n        }\n    ],\n    \"data\": null\n}"
								},
								{
									"name": "Access Token Expired",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "126"
										},
										{
											"key": "ETag",
											"value": "W/\"7e-GtRgWhqN7iKqYzLxAnMatoGWiNs\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:14:54 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidAccessToken\",\n    \"code\": \"InvalidAccessToken\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid token: access token has expired\"\n}"
								},
								{
									"name": "Invalid Access Token",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "125"
										},
										{
											"key": "ETag",
											"value": "W/\"7d-X5Hlvs/k/IQ8lqjZMIqbDZW5bJc\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:15:29 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"InvalidAccessToken\",\n    \"code\": \"InvalidAccessToken\",\n    \"statusCode\": 401,\n    \"message\": \"Invalid token: access token is invalid\"\n}"
								},
								{
									"name": "Unauthorized Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "hypercare-scope",
												"type": "text",
												"value": "{{scopetoken}}"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation sendMessage($chatId: ID!, $uniqueId: ID, $message: String!, $fileId: Int, $type: MessageType, $priority: Boolean) {\n    chat(chatId: $chatId) {\n        sendMessage(uniqueId: $uniqueId, message: $message, type: $type, fileId: $fileId, priority: $priority) {\n            id\n            image\n            attachment {\n                ...AttachmentFragment\n            }\n            message\n            type\n            sender {\n                id\n                username\n            }\n        }\n    }\n}\n\nfragment AttachmentFragment on Attachment {\n    id\n    url\n    mimeType\n    fileName\n}",
												"variables": "{\n\t\"chatId\": \"f05184e7-119c-4664-9402-41de7c05a98f\",\n\t\"message\": \"hey its irsa\",\n\t\"priority\": false\n}"
											}
										},
										"url": {
											"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
											"host": [
												"{{api_host_protocol}}{{api_hostname}}"
											],
											"path": [
												"graphql",
												"private"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=5184000; includeSubDomains"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "134"
										},
										{
											"key": "ETag",
											"value": "W/\"86-XDfIF2OBPyJh78GyxeEU0/dYOYY\""
										},
										{
											"key": "Date",
											"value": "Mon, 14 Feb 2022 17:15:43 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"UnauthorizedRequest\",\n    \"code\": \"UnauthorizedRequest\",\n    \"statusCode\": 401,\n    \"message\": \"Unauthorized request: no authentication given\"\n}"
								}
							]
						},
						{
							"name": "Fetch Stat Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"let response = jsonBody.data.chats;",
											"let Message = pm.collectionVariables.get(\"StatMessage\");",
											"let username = pm.collectionVariables.get(\"username\");",
											"var senderId = pm.collectionVariables.get(\"user_id\");",
											"",
											"console.log(\"Message is \"+Message)",
											"if (pm.response.code === 200) ",
											"{",
											"    tests[\"Verify that the priority typpe should be urgent\"] = response.chats[0].lastMessage.priorityType ===\"stat\";",
											"    tests[\"Verify that the message should be same\"] = response.chats[0].lastMessage.message ===Message;",
											"    tests[\"Verify that the date created should not null\"] = response.chats[0].lastMessage.dateCreated != null;",
											"     tests[\"Verify that the message sender Id should be same\"] = response.chats[0].lastMessage.sender.id ===senderId;",
											"      tests[\"Verify that the message sender username should be same\"] = response.chats[0].lastMessage.sender.username ===username;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{receiver_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query organizationChats($continuationId: ID, $limit: Int, $priority: MessagePriority) {\n  chats(continuationId: $continuationId, limit: $limit, priority: $priority) {\n    chats {\n      ...basicChatFields\n    }\n  }\n}\n\nfragment basicChatFields on Chat {\n  id\n  title\n  type\n  lastMessage {\n    ...messageFields\n  }\n  muted\n  dateCreated\n  isArchived\n}\n\nfragment messageFields on Message {\n  id\n  priorityType\n  message\n  image\n#   attachment {\n#     url\n#     mimeType\n#     fileName\n#   }\n  type\n  dateCreated\n  sender {\n    ...publicUserFields\n  }\n  readBy {\n    ...readReceiptFields\n  }\n  data {\n    __typename\n    ... on ConsultMessageData {\n      mrn\n      firstname\n      lastname\n      details\n    }\n  }\n}\n\nfragment readReceiptFields on ReadReceipt {\n  messageId\n  user {\n    ...publicUserFields\n  }\n  timestamp\n}\n\nfragment publicUserFields on PublicUser {\n  id\n  firstname\n  lastname\n  username\n  role\n  profilePic {\n    url\n  }\n  workStatus\n  statusDescription\n  workStatusProxy {\n    ...publicUserStatusFields\n  }\n}\n\nfragment publicUserStatusFields on PublicUser {\n  id\n  firstname\n  lastname\n  username\n  role\n  profilePic {\n    url\n  }\n}\n\n",
										"variables": "{\n\t\"priority\": \"stat\",\n    \"limit\": 10\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Fetch paginated messages for chat referenced by given id. </br>\n__Note__: This endpoint only paginates upwards.\n\n__@params__  </br>\nchatId - the id referencing the chat to fetch messages for </br>\ncontinuationId - the id of the message to start paginating from </br>\nlimit - the number of messages to load </br>\n\n__@return__ a list of messages"
							},
							"response": []
						},
						{
							"name": "Read Stat Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonBody = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"if (pm.response.code === 200) ",
											"{",
											"pm.test(\"All the messages were read\", function(){",
											" let messageRead = jsonBody.data.chat.messagesRead;",
											" console.log(\"The messages are:\", messageRead);",
											" pm.expect(messageRead).to.equal(true);",
											"})",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{receiver_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation readMessage($chatId: ID!, $messageIds: [Int!]!) {\n    chat(chatId: $chatId) {\n        messagesRead(messageIds: $messageIds)\n    }\n}",
										"variables": "{\n\t\"chatId\": \"{{chat_id}}\",\n\t\"messageIds\": [\"{{statMessageID}}\"]\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Marks message as read by user\n\n__@params__  </br>\nchatId - the id of the chat the message belongs to </br>\nmessageIds - an array of ids of the messages we want to mark as read </br>"
							},
							"response": []
						},
						{
							"name": "Fetch Stat Message after read message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"if (pm.response.code === 200) ",
											"{",
											"   ",
											"pm.test(\"Data array is empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.chats.chats.length).to.eql(0);",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "hypercare-scope",
										"value": "{{scopetoken}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{receiver_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query organizationChats($continuationId: ID, $limit: Int, $priority: MessagePriority) {\n  chats(continuationId: $continuationId, limit: $limit, priority: $priority) {\n    chats {\n      ...basicChatFields\n    }\n  }\n}\n\nfragment basicChatFields on Chat {\n  id\n  title\n  type\n  lastMessage {\n    ...messageFields\n  }\n  muted\n  dateCreated\n  isArchived\n}\n\nfragment messageFields on Message {\n  id\n  priorityType\n  message\n  image\n#   attachment {\n#     url\n#     mimeType\n#     fileName\n#   }\n  type\n  dateCreated\n  sender {\n    ...publicUserFields\n  }\n  readBy {\n    ...readReceiptFields\n  }\n  data {\n    __typename\n    ... on ConsultMessageData {\n      mrn\n      firstname\n      lastname\n      details\n    }\n  }\n}\n\nfragment readReceiptFields on ReadReceipt {\n  messageId\n  user {\n    ...publicUserFields\n  }\n  timestamp\n}\n\nfragment publicUserFields on PublicUser {\n  id\n  firstname\n  lastname\n  username\n  role\n  profilePic {\n    url\n  }\n  workStatus\n  statusDescription\n  workStatusProxy {\n    ...publicUserStatusFields\n  }\n}\n\nfragment publicUserStatusFields on PublicUser {\n  id\n  firstname\n  lastname\n  username\n  role\n  profilePic {\n    url\n  }\n}\n\n",
										"variables": "{\n\t\"priority\": \"stat\",\n    \"limit\": 10\n}"
									}
								},
								"url": {
									"raw": "{{api_host_protocol}}{{api_hostname}}/graphql/private",
									"host": [
										"{{api_host_protocol}}{{api_hostname}}"
									],
									"path": [
										"graphql",
										"private"
									]
								},
								"description": "Fetch paginated messages for chat referenced by given id. </br>\n__Note__: This endpoint only paginates upwards.\n\n__@params__  </br>\nchatId - the id referencing the chat to fetch messages for </br>\ncontinuationId - the id of the message to start paginating from </br>\nlimit - the number of messages to load </br>\n\n__@return__ a list of messages"
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const organizationId = pm.environment.get(\"organizationId\");",
					"const siteId = pm.environment.get(\"siteId\");",
					"const departmentId = pm.environment.get(\"departmentId\");",
					"const scopeStatus = pm.environment.get(\"scope_status\");",
					"",
					"const scope = {};",
					"",
					"organizationId && (scope.organizationId = Number(organizationId));",
					"siteId && (scope.siteId = Number(siteId));",
					"departmentId && (scope.departmentId = Number(departmentId));",
					"scopeStatus && (scope.status = scopeStatus);",
					"",
					"if (Object.keys(scope).length > 0) {",
					"    const base64Scope = Buffer.from(JSON.stringify(scope)).toString('base64');",
					"",
					"    pm.environment.set(\"scopetoken\", base64Scope);",
					"",
					"    console.log(scope, base64Scope);",
					"}",
					"",
					"console.log(pm.environment.get(\"scopetoken\"));",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "api_bearer",
			"value": ""
		},
		{
			"key": "collection_refresh_token",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "firstname",
			"value": ""
		},
		{
			"key": "lastname",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "role",
			"value": ""
		},
		{
			"key": "refresh_token",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "address",
			"value": ""
		},
		{
			"key": "UpdatedFirstName",
			"value": ""
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "Description",
			"value": ""
		},
		{
			"key": "old_password",
			"value": ""
		},
		{
			"key": "changed_password",
			"value": ""
		},
		{
			"key": "newPassword_token",
			"value": ""
		},
		{
			"key": "User_SMS",
			"value": ""
		},
		{
			"key": "phone",
			"value": ""
		},
		{
			"key": "Second_api_bearer",
			"value": ""
		},
		{
			"key": "Second_refresh_token",
			"value": ""
		},
		{
			"key": "Second_username",
			"value": ""
		},
		{
			"key": "Second_firstname",
			"value": ""
		},
		{
			"key": "Second_lastname",
			"value": ""
		},
		{
			"key": "Second_user_id",
			"value": ""
		},
		{
			"key": "Second_role",
			"value": ""
		},
		{
			"key": "chat_id",
			"value": ""
		},
		{
			"key": "Message",
			"value": ""
		},
		{
			"key": "SendMessageId",
			"value": ""
		},
		{
			"key": "msgId",
			"value": ""
		},
		{
			"key": "receiver_token",
			"value": ""
		},
		{
			"key": "replyMessage",
			"value": ""
		},
		{
			"key": "replyMsgId",
			"value": ""
		},
		{
			"key": "GroupMember-api_bearer",
			"value": ""
		},
		{
			"key": "GroupMember-refresh_token",
			"value": ""
		},
		{
			"key": "GroupMember-username",
			"value": ""
		},
		{
			"key": "GroupMember-firstname",
			"value": ""
		},
		{
			"key": "GroupMember-lastname",
			"value": ""
		},
		{
			"key": "GroupMember-user_id",
			"value": ""
		},
		{
			"key": "GroupMember-role",
			"value": ""
		},
		{
			"key": "groupChatID",
			"value": ""
		},
		{
			"key": "title",
			"value": ""
		},
		{
			"key": "admin_user_token",
			"value": ""
		},
		{
			"key": "second_member_token",
			"value": ""
		},
		{
			"key": "UrgentMessage",
			"value": ""
		},
		{
			"key": "urgentMessageID",
			"value": ""
		},
		{
			"key": "StatMessage",
			"value": ""
		},
		{
			"key": "statMessageID",
			"value": ""
		},
		{
			"key": "token_hash",
			"value": ""
		},
		{
			"key": "email_to_register",
			"value": ""
		},
		{
			"key": "token_id",
			"value": ""
		},
		{
			"key": "user_id_to_delete",
			"value": ""
		},
		{
			"key": "username_to_create",
			"value": ""
		},
		{
			"key": "user_organization_id",
			"value": ""
		},
		{
			"key": "member_id",
			"value": ""
		},
		{
			"key": "invite_code_id",
			"value": ""
		},
		{
			"key": "firstname_to_create",
			"value": ""
		},
		{
			"key": "lastname_to_create",
			"value": ""
		}
	]
}